}
inputtable <- rbind(inputtable, others)
rownames(inputtable)[nrow(inputtable)] = "Others"
# Remove rows that sum to zero
inputtable <- inputtable[rowSums(inputtable) != 0, ]
return(inputtable)
}
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
average_by_reps <- function (df,sampleIndex){
# Check if the dataframe and cols have compatible sizes
if (ncol(df) != length(sampleIndex)) {
stop("The number of columns in the dataframe must match the length of the vector")
}
# Get unique sample names
unique_samples <- unique(sampleIndex)
# Initialize the output dataframe
avg_df <- data.frame(matrix(ncol = length(unique_samples), nrow = nrow(df)))
colnames(avg_df) <- unique_samples
# Compute averages for each sample
for (sample in unique_samples) {
indices <- which(sampleIndex == sample)  # Get indices for columns corresponding to this sample
if (length(indices) == 1) {
# If only one column, use it directly
avg_df[, sample] <- df[, indices, drop = FALSE]
} else {
# Compute row means for multiple columns
avg_df[, sample] <- rowMeans(df[, indices, drop = FALSE], na.rm = TRUE)
}
}
return(avg_df)
}
map_values_to_colors <- function(values, color1, color2) {
# Create a palette function with the two colors
palette <- colorRampPalette(c(color1, color2))
# Compute the number of unique values
num_colors <- length(unique(values))
# Generate the colors from the palette
colors <- palette(num_colors)
# Normalize the values to range from 1 to num_colors
scaled_values <- cut(values, breaks = pretty(range(values), num_colors), labels = FALSE)
# Assign colors based on scaled values
assigned_colors <- colors[scaled_values]
return(assigned_colors)
}
plot_with_gradient_legend <- function(values, color1, color2) {
# Use the mapping function to get assigned colors
assigned_colors <- map_values_to_colors(values, color1, color2)
# Define the gradient legend parameters
num_colors <- length(unique(values))
colors <- colorRampPalette(c(color1, color2))(num_colors)  # Recreate palette for the legend
legend_height <- (par("usr")[4] - par("usr")[3]) / 8  # 1/8 of the plot window height
legend_width <- 0.1 * (par("usr")[2] - par("usr")[1])  # Relative width of the legend
# Position of the legend at the bottom left
legend_x <- par("usr")[1] + 0.02 * (par("usr")[2] - par("usr")[1])  # Slightly offset from the left
legend_y <- par("usr")[3] + 0.02 * (par("usr")[4] - par("usr")[3])  # Slightly offset from the bottom
# Draw the gradient legend
for (i in 1:num_colors) {
rect_x <- legend_x
rect_y <- legend_y + (i-1) * (legend_height / num_colors)
rect(rect_x, rect_y, rect_x + legend_width, rect_y + (legend_height / num_colors), col = colors[i], border = NA)
}
# Labeling the min and max values at the bottom and top of the legend
text(legend_x + legend_width / 2, legend_y - 0.1 * legend_height, labels = min(values), cex = 0.8, adj = 0.5)
text(legend_x + legend_width / 2, legend_y + legend_height + 0.05 * legend_height, labels = max(values), cex = 0.8, adj = 0.5)
}
add.alpha <- function(col, alpha=1){
if(missing(col))
stop("Please provide a vector of colours.")
apply(sapply(col, col2rgb)/255, 2,
function(x)
rgb(x[1], x[2], x[3], alpha=alpha))
}
# Here is a function to create labels from dates in numeric form such that +ive numbers give CE and -ive numbers give BCE
number_to_CE_label <- function(numbers) {
# Create an empty character vector to store the labels
labels <- character(length(numbers))
# Loop through each number in the vector
for (i in seq_along(numbers)) {
if (numbers[i] >= 0) {
labels[i] <- paste(numbers[i], "CE")
} else {
labels[i] <- paste(abs(numbers[i]), "BCE")
}
}
return(labels)
}
####====0.3 Data Prep====####
ages <- read.csv("metadata/AgeOut.csv")
ages$ID2 <- gsub("-","_",ages$ID)
EUK.tax.PR2 <- read.csv("taxonomy/EUK.cleaned.PR2.csv",row.names = 1)
EUK.tax.PR2.cat <- read.csv("taxonomy/functionalAnno/EUK.cleaned.PR2.cat.csv",row.names = 1)
climate <- read.csv("metadata/climate.csv",row.names = 1)
## EUK datasets
EUK.GC1 <- read.csv("cleaneddata/combinedcoredata/EUK.GC01.csv",row.names = 1)
EUK.GC1.nREPS <- NrepsMaker(EUK.GC1,gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1)))
EUK.GC1.avr <- average_by_reps(prop.table(as.matrix(EUK.GC1),2),gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1)))
EUK.GC1.bin <- make_binary(EUK.GC1,1)
EUK.GC1.ages <- ages$median[match(colnames(EUK.GC1.avr),ages$ID2)]
EUK.P19 <- read.csv("cleaneddata/combinedcoredata/EUK.PC019.csv",row.names = 1)
EUK.P19.nREPS <- NrepsMaker(EUK.P19,gsub("(.*)_[0-9]$","\\1",colnames(EUK.P19)))
EUK.P19.avr <- average_by_reps(prop.table(as.matrix(EUK.P19),2),gsub("(.*)_[0-9]$","\\1",colnames(EUK.P19)))
EUK.P19.bin <- make_binary(EUK.P19,1)
EUK.P19.ages <- ages$median[match(colnames(EUK.P19.avr),ages$ID2)]
#make subsets per taxonomic group
##P19
EUK.p19.avr.bac <- EUK.P19.avr[match(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain=="Bacteria" & EUK.tax.PR2$Domain.1>80],EUK.tax.PR2$X.1),]
row.names(EUK.p19.avr.bac) <- EUK.tax.PR2$X.1[EUK.tax.PR2$Domain=="Bacteria" & EUK.tax.PR2$Domain.1>80]
EUK.p19.avr.met <- EUK.P19.avr[match(na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Subdivision=="Metazoa" & EUK.tax.PR2$Subdivision>80]),EUK.tax.PR2$X.1),]
row.names(EUK.p19.avr.met) <- na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Subdivision=="Metazoa" & EUK.tax.PR2$Subdivision>80])
EUK.p19.avr.pro <- EUK.P19.avr[match(na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain!="Bacteria" & EUK.tax.PR2$Subdivision!="Metazoa" & EUK.tax.PR2$Subdivision!="Fungi" & EUK.tax.PR2$Subdivision>80]),EUK.tax.PR2$X.1),]
row.names(EUK.p19.avr.pro) <- na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain!="Bacteria" & EUK.tax.PR2$Subdivision!="Metazoa" & EUK.tax.PR2$Subdivision!="Fungi" & EUK.tax.PR2$Subdivision>80])
#GC1
EUK.GC1.avr.bac <- EUK.GC1.avr[match(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain=="Bacteria" & EUK.tax.PR2$Domain.1>80],EUK.tax.PR2$X.1),]
row.names(EUK.GC1.avr.bac) <- EUK.tax.PR2$X.1[EUK.tax.PR2$Domain=="Bacteria" & EUK.tax.PR2$Domain.1>80]
EUK.GC1.avr.met <- EUK.GC1.avr[match(na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Subdivision=="Metazoa" & EUK.tax.PR2$Subdivision>80]),EUK.tax.PR2$X.1),]
row.names(EUK.GC1.avr.met) <- na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Subdivision=="Metazoa" & EUK.tax.PR2$Subdivision>80])
EUK.GC1.avr.pro <- EUK.GC1.avr[match(na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain!="Bacteria" & EUK.tax.PR2$Subdivision!="Metazoa" & EUK.tax.PR2$Subdivision!="Fungi" & EUK.tax.PR2$Subdivision>80]),EUK.tax.PR2$X.1),]
row.names(EUK.GC1.avr.pro) <- na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain!="Bacteria" & EUK.tax.PR2$Subdivision!="Metazoa" & EUK.tax.PR2$Subdivision!="Fungi" & EUK.tax.PR2$Subdivision>80])
###Make taxonomic files
EUKtax <- read.csv("taxonomy/EUK.combined.parsed.csv")
EUKasv <- readDNAStringSet("cleaneddata/ASVs/EUK.cleaned.fasta")
EUKtax$ASVseq <- as.character(EUKasv)[match(EUKtax$OTU,names(EUKasv))]
write.csv(EUKtax,file = "taxonomy/byHand/EUKtax.csv")
####====1.0 Taxonomic overview====####
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
#GC1
EUK.GC1.tax.a <- minAbundance(CountTable(as.character(EUK.tax.PR2$Family),EUK.GC1.avr,output = "Abundance"),minAbun=0.01)
EUK.GC1.tax.c <- minAbundance(CountTable(as.character(EUK.tax.PR2$Family),EUK.GC1.avr,output = "Count"),minAbun=0.01)
row.names(EUK.GC1.tax.a)[1] <- "Unknown"
row.names(EUK.GC1.tax.c)[1] <- "Unknown"
EUK.GC1.tax.a <- as.matrix(prop.table(as.matrix(EUK.GC1.tax.a[,order(ages$median[match(colnames(EUK.GC1.tax.a),ages$ID2)])]),margin = 2))
EUK.GC1.tax.c <- as.matrix(prop.table(as.matrix(EUK.GC1.tax.c[,order(ages$median[match(colnames(EUK.GC1.tax.c),ages$ID2)])]),margin = 2))
barplot(EUK.GC1.tax.a,col=rev(getPalette(dim(EUK.GC1.tax.a)[1])))
barplot(EUK.GC1.tax.c,col=rev(getPalette(dim(EUK.GC1.tax.c)[1])))
pdf("figures/EUK.GC1.tax.Family.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.GC1.tax.a,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.GC1.tax.a)[1])),ylab="Read Abundance",names.arg=ages$median[match(colnames(EUK.GC1.tax.a),ages$ID2)])
legend(56,1,rev(rownames(EUK.GC1.tax.a)),fill=getPalette(dim(EUK.GC1.tax.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(EUK.GC1.tax.c,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.GC1.tax.c)[1])),ylab="ASV Counts",names.arg=ages$median[match(colnames(EUK.GC1.tax.c),ages$ID2)])
legend(56,1,rev(rownames(EUK.GC1.tax.c)),fill=getPalette(dim(EUK.GC1.tax.c)[1]),cex=0.5,bty = "n",y.intersp=0.75)
dev.off()
#GC1 cat
EUK.GC1.tax.a <- minAbundance(CountTable(as.character(EUK.tax.PR2.cat$cat),EUK.GC1.avr,output = "Abundance"),minAbun=0.01)
EUK.GC1.tax.c <- minAbundance(CountTable(as.character(EUK.tax.PR2.cat$cat),EUK.GC1.avr,output = "Count"),minAbun=0.01)
EUK.GC1.tax.a <- as.matrix(prop.table(as.matrix(EUK.GC1.tax.a[,order(ages$median[match(colnames(EUK.GC1.tax.a),ages$ID2)])]),margin = 2))
EUK.GC1.tax.c <- as.matrix(prop.table(as.matrix(EUK.GC1.tax.c[,order(ages$median[match(colnames(EUK.GC1.tax.c),ages$ID2)])]),margin = 2))
barplot(EUK.GC1.tax.a,col=rev(getPalette(dim(EUK.GC1.tax.a)[1])))
barplot(EUK.GC1.tax.c,col=rev(getPalette(dim(EUK.GC1.tax.c)[1])))
pdf("figures/EUK.GC1.tax.cat.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.GC1.tax.a,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.GC1.tax.a)[1])),ylab="Read Abundance",names.arg=ages$median[match(colnames(EUK.GC1.tax.a),ages$ID2)])
legend(56,1,rev(rownames(EUK.GC1.tax.a)),fill=getPalette(dim(EUK.GC1.tax.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(EUK.GC1.tax.c,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.GC1.tax.c)[1])),ylab="ASV Counts",names.arg=ages$median[match(colnames(EUK.GC1.tax.c),ages$ID2)])
legend(56,1,rev(rownames(EUK.GC1.tax.c)),fill=getPalette(dim(EUK.GC1.tax.c)[1]),cex=0.5,bty = "n",y.intersp=0.75)
dev.off()
##PC19
EUK.P19.tax.a <- minAbundance(CountTable(as.character(EUK.tax.PR2$Family),EUK.P19.avr,output = "Abundance"),minAbun=0.01)
EUK.P19.tax.c <- minAbundance(CountTable(as.character(EUK.tax.PR2$Family),EUK.P19.avr,output = "Count"),minAbun=0.01)
row.names(EUK.P19.tax.a)[1] <- "Unknown"
row.names(EUK.P19.tax.c)[1] <- "Unknown"
EUK.P19.tax.a <- as.matrix(prop.table(as.matrix(EUK.P19.tax.a[,order(ages$median[match(colnames(EUK.P19.tax.a),ages$ID2)])]),margin = 2))
EUK.P19.tax.c <- as.matrix(prop.table(as.matrix(EUK.P19.tax.c[,order(ages$median[match(colnames(EUK.P19.tax.c),ages$ID2)])]),margin = 2))
pdf("figures/EUK.P19.tax.Family.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.P19.tax.a,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.P19.tax.a)[1])),ylab="Read Abundance",names.arg=ages$median[match(colnames(EUK.P19.tax.a),ages$ID2)])
legend(190,1,rev(rownames(EUK.P19.tax.a)),fill=getPalette(dim(EUK.P19.tax.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(EUK.P19.tax.c,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.P19.tax.c)[1])),ylab="ASV Counts",names.arg=ages$median[match(colnames(EUK.P19.tax.c),ages$ID2)])
legend(190,1,rev(rownames(EUK.P19.tax.c)),fill=getPalette(dim(EUK.P19.tax.c)[1]),cex=0.5,bty = "n",y.intersp=0.75)
dev.off()
##PC19 cat
EUK.P19.tax.a <- minAbundance(CountTable(as.character(EUK.tax.PR2.cat$cat),EUK.P19.avr,output = "Abundance"),minAbun=0.01)
EUK.P19.tax.c <- minAbundance(CountTable(as.character(EUK.tax.PR2.cat$cat),EUK.P19.avr,output = "Count"),minAbun=0.01)
EUK.P19.tax.a <- as.matrix(prop.table(as.matrix(EUK.P19.tax.a[,order(ages$median[match(colnames(EUK.P19.tax.a),ages$ID2)])]),margin = 2))
EUK.P19.tax.c <- as.matrix(prop.table(as.matrix(EUK.P19.tax.c[,order(ages$median[match(colnames(EUK.P19.tax.c),ages$ID2)])]),margin = 2))
pdf("figures/EUK.P19.tax.cat.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.P19.tax.a,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.P19.tax.a)[1])),ylab="Read Abundance",names.arg=1950-ages$mean[match(colnames(EUK.P19.tax.a),ages$ID2)])
legend(190,1,rev(rownames(EUK.P19.tax.a)),fill=getPalette(dim(EUK.P19.tax.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(EUK.P19.tax.c,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.P19.tax.c)[1])),ylab="ASV Counts",names.arg=1950-ages$median[match(colnames(EUK.P19.tax.c),ages$ID2)])
legend(190,1,rev(rownames(EUK.P19.tax.c)),fill=getPalette(dim(EUK.P19.tax.c)[1]),cex=0.5,bty = "n",y.intersp=0.75)
dev.off()
#Both
unique_taxa <- sort(unique(c(rownames(EUK.P19.tax.a), rownames(EUK.GC1.tax.a))))
taxa_colors <- setNames(colorRampPalette(brewer.pal(12, "Set1"))(length(unique_taxa)), unique_taxa)
EUK.P19.tax.a <- EUK.P19.tax.a[order(rownames(EUK.P19.tax.a)),]
EUK.GC1.tax.a <- EUK.GC1.tax.a[order(rownames(EUK.GC1.tax.a)),]
pdf("figures/EUK.tax.cat.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.P19.tax.a[,dim(EUK.P19.tax.a)[2]:1],las=2,cex.names=0.6,col=taxa_colors[rownames(EUK.P19.tax.a)],ylab="Read Abundance",border = NA,ylim=c(1,0),yaxt="n",
names.arg=number_to_CE_label(rev(1950-ages$mean[match(colnames(EUK.P19.tax.a),ages$ID2)])))
axis(2,at=seq(0,1,.2),labels=rev(seq(0,1,.2)),las=2)
#legend(190,0.2,unique_taxa,fill=taxa_colors[unique_taxa],cex=0.5,bty = "n",y.intersp=0.75, xpd = TRUE,inset = c(-0.25, 0))
barplot(EUK.GC1.tax.a[,dim(EUK.GC1.tax.a)[2]:1],las=2,cex.names=0.6,col=taxa_colors[rownames(EUK.GC1.tax.a)],ylab="Read Abundance",border = NA,ylim=c(1,0),yaxt="n",
names.arg=number_to_CE_label(rev(1950-ages$mean[match(colnames(EUK.GC1.tax.a),ages$ID2)])))
axis(2,at=seq(0,1,.2),labels=rev(seq(0,1,.2)),las=2)
par(mfrow=c(1, 1))
legend(57,0.3,unique_taxa,col=taxa_colors[unique_taxa],cex=0.7,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
#### Lets produce some stats about the first ASV
sum(EUK.P19[1,],EUK.GC1[1,])
pdf("figures/EUK.ASV1.pdf",width = 9,height = 7)
plot(1950-ages$mean[match(names(EUK.P19.avr),ages$ID2)],EUK.P19.avr[1,],pch=16,ylab="Propotion of reads",xlab="Year",xaxt = "n",xlim=c(-1600,2000),ylim=c(0,1),col="navyblue")
axis(1,at=seq(-1500,2000,500),labels = number_to_CE_label(seq(-1500,2000,500)))
points(1950-ages$mean[match(names(EUK.GC1.avr),ages$ID2)],EUK.GC1.avr[1,],pch=16,col="cadetblue4")
dev.off()
pdf("figures/EUK.ASV1.pdf",width = 9,height = 7)
plot(1950-ages$mean[match(names(EUK.P19.avr),ages$ID2)],EUK.P19.avr[227,],pch=16,ylab="Propotion of reads",xlab="Year",xaxt = "n",xlim=c(-1600,2000),col="navyblue")
axis(1,at=seq(-1500,2000,500),labels = number_to_CE_label(seq(-1500,2000,500)))
points(1950-ages$mean[match(names(EUK.GC1.avr),ages$ID2)],EUK.GC1.avr[227,],pch=16,col="cadetblue4")
dev.off()
####====2.0 Alpha Diversity====####
## total richness
#PC19
EUK.P19.avr.filt <- EUK.P19.avr
#EUK.P19.avr.filt[EUK.P19.nREPS < 2] <- 0
EUK.P19.richness <- colSums(make_binary(EUK.P19.avr.filt*1000000000000,2))
#GC1
EUK.GC1.avr.filt <- EUK.GC1.avr
#EUK.GC1.avr.filt[EUK.GC1.nREPS < 2] <- 0
EUK.GC1.richness <- colSums(make_binary(EUK.GC1.avr.filt*1000000000000,2))
### plot
year1 <- 1950-ages$mean[match(names(EUK.P19.richness),ages$ID2)]
value1 <- EUK.P19.richness
year2 <- 1950-ages$mean[match(names(EUK.GC1.richness),ages$ID2)]
value2 <- EUK.GC1.richness
gam1 <- gam(value1 ~ s(year1,k=20), method = "REML")
gam2 <- gam(value2 ~ s(year2,k=20), method = "REML")
plot(gam1)
plot(gam2)
prediction <- data.frame("year1"=-1103:1725)
prediction <- cbind(prediction,predict(gam1,newdata = prediction,se.fit = TRUE))
prediction$uppCI <- prediction$fit+prediction$se.fit*1.96
prediction$lwrCI <- prediction$fit-prediction$se.fit*1.96
prediction2 <- data.frame("year2"=-1561:1668)
prediction2 <- cbind(prediction2,predict(gam2,newdata = prediction2,se.fit = TRUE))
prediction2$uppCI <- prediction2$fit+prediction2$se.fit*1.96
prediction2$lwrCI <- prediction2$fit-prediction2$se.fit*1.96
pdf("figures/EUK.richness.pdf",height=4,width=10)
par(mar=c(4.1,4.1,2.1,6.1))
plot(1950-ages$mean[match(names(EUK.P19.richness),ages$ID2)],
EUK.P19.richness,
xlim=c(-1550,2000),bty = 'n',ylab="ASV richness",xlab="Year",
pch=16,col="slateblue")
points(1950-ages$mean[match(names(EUK.GC1.richness),ages$ID2)],
EUK.GC1.richness,
pch=16,col="lightblue4")
polygon(c(prediction$year, rev(prediction$year)), c(prediction$uppCI, rev(prediction$lwrCI)), col=add.alpha('mediumslateblue',0.3), border=NA)
points(prediction$year,prediction$fit,type="l",col="navyblue",lwd=3)
polygon(c(prediction2$year, rev(prediction2$year)), c(prediction2$uppCI, rev(prediction2$lwrCI)), col=add.alpha('lightblue4',0.3), border=NA)
points(prediction2$year,prediction2$fit,type="l",col="cadetblue4",lwd=3)
dev.off()
## subset richness
#Metazoa
#PC19
EUK.P19.avr.met.filt <- EUK.p19.avr.met
#EUK.P19.avr.filt[EUK.P19.nREPS < 2] <- 0
EUK.P19.met.richness <- colSums(make_binary(EUK.P19.avr.met.filt*1000000000000,2))
#GC1
EUK.GC1.avr.met.filt <- EUK.GC1.avr.met
#EUK.GC1.avr.filt[EUK.GC1.nREPS < 2] <- 0
EUK.GC1.met.richness <- colSums(make_binary(EUK.GC1.avr.met.filt*1000000000000,2))
### plot
year1 <- 1950-ages$mean[match(names(EUK.P19.met.richness),ages$ID2)]
value1 <- EUK.P19.met.richness
year2 <- 1950-ages$mean[match(names(EUK.GC1.met.richness),ages$ID2)]
value2 <- EUK.GC1.met.richness
gam1 <- gam(value1 ~ s(year1,k=20), method = "REML")
gam2 <- gam(value2 ~ s(year2,k=20), method = "REML")
plot(gam1)
plot(gam2)
prediction <- data.frame("year1"=-1103:1725)
prediction <- cbind(prediction,predict(gam1,newdata = prediction,se.fit = TRUE))
prediction$uppCI <- prediction$fit+prediction$se.fit*1.96
prediction$lwrCI <- prediction$fit-prediction$se.fit*1.96
prediction2 <- data.frame("year2"=-1561:1668)
prediction2 <- cbind(prediction2,predict(gam2,newdata = prediction2,se.fit = TRUE))
prediction2$uppCI <- prediction2$fit+prediction2$se.fit*1.96
prediction2$lwrCI <- prediction2$fit-prediction2$se.fit*1.96
pdf("figures/EUK.met.richness.pdf",height=4,width=10)
par(mar=c(4.1,4.1,2.1,6.1))
plot(1950-ages$mean[match(names(EUK.P19.met.richness),ages$ID2)],
EUK.P19.met.richness,
xlim=c(-1550,2000),bty = 'n',ylab="ASV richness",xlab="Year",
pch=16,col="slateblue")
points(1950-ages$mean[match(names(EUK.GC1.met.richness),ages$ID2)],
EUK.GC1.met.richness,
pch=16,col="lightblue4")
polygon(c(prediction$year, rev(prediction$year)), c(prediction$uppCI, rev(prediction$lwrCI)), col=add.alpha('mediumslateblue',0.3), border=NA)
points(prediction$year,prediction$fit,type="l",col="navyblue",lwd=3)
polygon(c(prediction2$year, rev(prediction2$year)), c(prediction2$uppCI, rev(prediction2$lwrCI)), col=add.alpha('lightblue4',0.3), border=NA)
points(prediction2$year,prediction2$fit,type="l",col="cadetblue4",lwd=3)
dev.off()
#protists
#PC19
EUK.P19.avr.pro.filt <- EUK.p19.avr.pro
#EUK.P19.avr.filt[EUK.P19.nREPS < 2] <- 0
EUK.P19.pro.richness <- colSums(make_binary(EUK.P19.avr.pro.filt*1000000000000,2))
#GC1
EUK.GC1.avr.pro.filt <- EUK.GC1.avr.pro
#EUK.GC1.avr.filt[EUK.GC1.nREPS < 2] <- 0
EUK.GC1.pro.richness <- colSums(make_binary(EUK.GC1.avr.pro.filt*1000000000000,2))
### plot
year1 <- 1950-ages$mean[match(names(EUK.P19.pro.richness),ages$ID2)]
value1 <- EUK.P19.pro.richness
year2 <- 1950-ages$mean[match(names(EUK.GC1.pro.richness),ages$ID2)]
value2 <- EUK.GC1.pro.richness
gam1 <- gam(value1 ~ s(year1,k=20), method = "REML")
gam2 <- gam(value2 ~ s(year2,k=20), method = "REML")
plot(gam1)
plot(gam2)
prediction <- data.frame("year1"=-1103:1725)
prediction <- cbind(prediction,predict(gam1,newdata = prediction,se.fit = TRUE))
prediction$uppCI <- prediction$fit+prediction$se.fit*1.96
prediction$lwrCI <- prediction$fit-prediction$se.fit*1.96
prediction2 <- data.frame("year2"=-1561:1668)
prediction2 <- cbind(prediction2,predict(gam2,newdata = prediction2,se.fit = TRUE))
prediction2$uppCI <- prediction2$fit+prediction2$se.fit*1.96
prediction2$lwrCI <- prediction2$fit-prediction2$se.fit*1.96
pdf("figures/EUK.pro.richness.pdf",height=4,width=10)
par(mar=c(4.1,4.1,2.1,6.1))
plot(1950-ages$mean[match(names(EUK.P19.pro.richness),ages$ID2)],
EUK.P19.pro.richness,
xlim=c(-1550,2000),bty = 'n',ylab="ASV richness",xlab="Year",
pch=16,col="slateblue")
points(1950-ages$mean[match(names(EUK.GC1.pro.richness),ages$ID2)],
EUK.GC1.pro.richness,
pch=16,col="lightblue4")
polygon(c(prediction$year, rev(prediction$year)), c(prediction$uppCI, rev(prediction$lwrCI)), col=add.alpha('mediumslateblue',0.3), border=NA)
points(prediction$year,prediction$fit,type="l",col="navyblue",lwd=3)
polygon(c(prediction2$year, rev(prediction2$year)), c(prediction2$uppCI, rev(prediction2$lwrCI)), col=add.alpha('lightblue4',0.3), border=NA)
points(prediction2$year,prediction2$fit,type="l",col="cadetblue4",lwd=3)
dev.off()
#bacteria
#PC19
EUK.P19.avr.bac.filt <- EUK.p19.avr.bac
#EUK.P19.avr.filt[EUK.P19.nREPS < 2] <- 0
EUK.P19.bac.richness <- colSums(make_binary(EUK.P19.avr.bac.filt*1000000000000,2))
#GC1
EUK.GC1.avr.bac.filt <- EUK.GC1.avr.bac
#EUK.GC1.avr.filt[EUK.GC1.nREPS < 2] <- 0
EUK.GC1.bac.richness <- colSums(make_binary(EUK.GC1.avr.bac.filt*1000000000000,2))
### plot
year1 <- 1950-ages$mean[match(names(EUK.P19.bac.richness),ages$ID2)]
value1 <- EUK.P19.bac.richness
year2 <- 1950-ages$mean[match(names(EUK.GC1.bac.richness),ages$ID2)]
value2 <- EUK.GC1.bac.richness
gam1 <- gam(value1 ~ s(year1,k=20), method = "REML")
gam2 <- gam(value2 ~ s(year2,k=20), method = "REML")
plot(gam1)
plot(gam2)
prediction <- data.frame("year1"=-1103:1725)
prediction <- cbind(prediction,predict(gam1,newdata = prediction,se.fit = TRUE))
prediction$uppCI <- prediction$fit+prediction$se.fit*1.96
prediction$lwrCI <- prediction$fit-prediction$se.fit*1.96
prediction2 <- data.frame("year2"=-1561:1668)
prediction2 <- cbind(prediction2,predict(gam2,newdata = prediction2,se.fit = TRUE))
prediction2$uppCI <- prediction2$fit+prediction2$se.fit*1.96
prediction2$lwrCI <- prediction2$fit-prediction2$se.fit*1.96
pdf("figures/EUK.bac.richness.pdf",height=4,width=10)
par(mar=c(4.1,4.1,2.1,6.1))
plot(1950-ages$mean[match(names(EUK.P19.bac.richness),ages$ID2)],
EUK.P19.bac.richness,
xlim=c(-1550,2000),bty = 'n',ylab="ASV richness",xlab="Year",
pch=16,col="slateblue",ylim=c(50,500))
points(1950-ages$mean[match(names(EUK.GC1.bac.richness),ages$ID2)],
EUK.GC1.bac.richness,
pch=16,col="lightblue4")
polygon(c(prediction$year, rev(prediction$year)), c(prediction$uppCI, rev(prediction$lwrCI)), col=add.alpha('mediumslateblue',0.3), border=NA)
points(prediction$year,prediction$fit,type="l",col="navyblue",lwd=3)
polygon(c(prediction2$year, rev(prediction2$year)), c(prediction2$uppCI, rev(prediction2$lwrCI)), col=add.alpha('lightblue4',0.3), border=NA)
points(prediction2$year,prediction2$fit,type="l",col="cadetblue4",lwd=3)
dev.off()
## subset richness @ 3 & 6 replicates
#PC19
par(mfrow=c(4,2))
for (num in 0:7){
EUK.P19.avr.filt <- EUK.P19.avr
EUK.P19.avr.filt[EUK.P19.nREPS < num] <- 0
plot(1950-ages$median[match(gsub("(.*)_[0-9]$","\\1",colnames(EUK.P19.avr.filt)),ages$ID2)],colSums(make_binary(EUK.P19.avr.filt*100000000000,1)),ylab="",xlab="",pch=16,main=paste0("> ",num," +ive reps"))
}
#GC1
par(mfrow=c(4,2))
for (num in 0:7){
EUK.GC1.avr.filt <- EUK.GC1.avr
EUK.GC1.avr.filt[EUK.GC1.nREPS < num] <- 0
plot(1950-ages$median[match(gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1.avr.filt)),ages$ID2)],colSums(make_binary(EUK.GC1.avr.filt*100000000000,1)),ylab="",xlab="",pch=16,main=paste0("> ",num," +ive reps"))
}
## effect of normalisation
## GC1
## calc raw richness
EUK.GC1.raw.richness <- colSums(make_binary(EUK.GC1,2))
## calc breakaway richness
EUK.richEst <- breakaway(EUK.GC1)
EUK.GC1.breakaway.richEstimate <- unlist(lapply(EUK.richEst,FUN = function(x){x[["estimate"]]}))
##cacl rarefy rich
EUK.GC1.rare.richness.1 <- colSums(make_binary(as.data.frame(t(rrarefy(t(EUK.GC1),7000))),2))
EUK.GC1.rare.richness.2 <- colSums(make_binary(as.data.frame(t(rrarefy(t(EUK.GC1),14000))),2))
## compare values
plot(EUK.GC1.raw.richness,EUK.GC1.breakaway.richEstimate)
plot(EUK.GC1.raw.richness,EUK.GC1.rare.richness.1)
plot(EUK.GC1.raw.richness,EUK.GC1.rare.richness.2)
EUK.GC1.mean.rich <- tapply(EUK.GC1.raw.richness,FUN=mean,INDEX = gsub("(.*)_[0-9]$","\\1",names(EUK.GC1.raw.richness)))
## plot vs time
pdf("figures/EUK.GC1.richness.pdf",width = 9,height = 6.5)
plot(ages$median[match(gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1)),ages$ID2)],
colSums(make_binary(EUK.GC1,2)),
pch=16,
xlab="Cal yr BP",
ylab="ASV Richness",
col="grey")
points(ages$median[match(names(EUK.GC1.mean.rich),ages$ID2)],
EUK.GC1.mean.rich,
pch=16,
col="black",
cex=2)
dev.off()
plot(ages$median[match(gsub("(.*)_[0-9]$","\\1",names(EUK.GC1)),ages$ID2)],
colSums(make_binary(as.data.frame(t(rrarefy(t(EUK.GC1),14000))),2)),
pch=16,
xlab="Cal yr BP",
ylab="ASV Richness")
## with GAM
GC1.rich.gam.dat  <- data.frame("year"=ages$median[match(names(EUK.GC1.mean.rich),ages$ID2)],
"richness"=EUK.GC1.mean.rich)
m <- gam(richness ~ s(year, k = 20), data = GC1.rich.gam.dat, method = "REML")
prediction <- data.frame("year"=280:3600)
prediction <- cbind(prediction,predict(m,prediction,se.fit=TRUE))
deriv <- gratia::derivatives(m)
prediction$uppCI <- prediction$fit+prediction$se.fit*1.96
prediction$lwrCI <- prediction$fit-prediction$se.fit*1.96
pdf("figures/EUK.GC1.richness.gam.pdf",width = 9,height = 4.5)
par(mar=c(5.1, 4.1, 1.1, 1.1))
plot(ages$median[match(gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1)),ages$ID2)],
colSums(make_binary(EUK.GC1,2)),
pch=16,
xlab="Cal yr BP",
ylab="ASV Richness",
col="grey")
polygon(c(prediction$year, rev(prediction$year)), c(prediction$uppCI, rev(prediction$lwrCI)), col=add.alpha('darkgrey',0.3), border=NA)
points(prediction$year,prediction$fit,lwd=5,col="black",type='l')
dev.off()
## P19
## calc raw richness
EUK.P19.raw.richness <- colSums(make_binary(EUK.P19,2))
## calc breakaway richness
EUK.richEst <- breakaway(EUK.P19)
EUK.P19.breakaway.richEstimate <- unlist(lapply(EUK.richEst,FUN = function(x){x[["estimate"]]}))
##cacl rarefy rich
EUK.P19.rare.richness.1 <- colSums(make_binary(as.data.frame(t(rrarefy(t(EUK.P19),7000))),2))
EUK.P19.rare.richness.2 <- colSums(make_binary(as.data.frame(t(rrarefy(t(EUK.P19),14000))),2))
## compare values
plot(EUK.P19.raw.richness,EUK.P19.breakaway.richEstimate)
plot(EUK.P19.raw.richness,EUK.P19.rare.richness.1)
plot(EUK.P19.raw.richness,EUK.P19.rare.richness.2)
EUK.P19.mean.rich <- tapply(EUK.P19.raw.richness,FUN=mean,INDEX = gsub("(.*)_[0-9]$","\\1",names(EUK.P19.raw.richness)))
plot(ages$median[match(gsub("(.*)_[0-9]$","\\1",names(EUK.P19)),ages$ID2)],
colSums(make_binary(as.data.frame(t(rrarefy(t(EUK.P19),14000))),2)),
pch=16,
xlab="Cal yr BP",
ylab="ASV Richness")
plot(ages$median[match(gsub("(.*)_[0-9]$","\\1",names(EUK.P19)),ages$ID2)],
colSums(make_binary(as.data.frame(t(rrarefy(t(EUK.P19),14000))),2)),
pch=16,
xlab="Cal yr BP",
ylab="ASV Richness")
dev.off()
plot(ages$median[match(gsub("(.*)_[0-9]$","\\1",names(EUK.P19)),ages$ID2)],
colSums(make_binary(as.data.frame(t(rrarefy(t(EUK.P19),14000))),2)),
pch=16,
xlab="Cal yr BP",
ylab="ASV Richness")
## here we use the average dataset
EUK.GC1.MDS.b <- wcmdscale(vegdist(t(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")])),eig = TRUE)
EUK.GC1.MDS.j <- wcmdscale(vegdist(t(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")]),method = "jac",binary=TRUE),eig = TRUE)
EUK.GC1.nMDS.b <- metaMDS(t(prop.table(as.matrix(EUK.GC1.avr),2)),k=2,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.b)
EUK.GC1.nMDS.b <- metaMDS(t(prop.table(as.matrix(EUK.GC1.avr),2)),k=3,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.b)
EUK.GC1.nMDS.b <- metaMDS(t(prop.table(as.matrix(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")]),2)),k=3,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.b)
EUK.PC19.nMDS.b <- metaMDS(t(prop.table(as.matrix(EUK.P19.avr),2)),k=3,trymax = 200,parallel=8)
plot(EUK.PC19.nMDS.b)
## here we use the average dataset
EUK.GC1.MDS.b <- wcmdscale(vegdist(t(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")])),eig = TRUE)
EUK.GC1.MDS.b <- wcmdscale(vegdist(t(EUK.GC1.avr)),eig = TRUE)
plot(EUK.GC1.MDS.b)
EUK.GC1.nMDS.b$points
plot(EUK.GC1.nMDS.b$points[,1],EUK.GC1.nMDS.b$points[,2])
plot(EUK.PC19.nMDS.b$points[,1],EUK.PC19.nMDS.b$points[,2])
EUK.GC1.nMDS.j <- metaMDS(vegdist(t(prop.table(as.matrix(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")]),2)),method = "jaccard",binary=TRUE),k=3,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.j$points[,1],EUK.GC1.nMDS.j$points[,2])
plot(EUK.GC1.nMDS.j$points[,1],EUK.GC1.nMDS.j$points[,2],pch=16)
plot(EUK.GC1.nMDS.j$points[,1],EUK.GC1.nMDS.j$points[,3],pch=16,)
EUK.GC1.nMDS.j <- metaMDS(vegdist(t(prop.table(as.matrix(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")]),2)),method = "jaccard",binary=TRUE),k=2,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.j$points[,1],EUK.GC1.nMDS.j$points[,2],pch=16,)
EUK.GC1.nMDS.b <- metaMDS(t(prop.table(as.matrix(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")]),2)),k=2,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.b$points[,1],EUK.GC1.nMDS.b$points[,2])
EUK.GC1.nMDS.j <- metaMDS(vegdist(t(prop.table(as.matrix(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")]),2)),method = "jaccard",binary=TRUE),k=2,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.j$points[,1],EUK.GC1.nMDS.j$points[,2],pch=16,)
EUK.PC19.nMDS.j <- metaMDS(vegdist(t(prop.table(as.matrix(EUK.P19.avr),2)),method = "jaccard",binary=TRUE),k=2,trymax = 200,parallel=8)
plot(EUK.PC19.nMDS.j$points[,1],EUK.PC19.nMDS.j$points[,2])
EUK.GC1.nMDS.b <- metaMDS(t(prop.table(as.matrix(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")]),2)),k=2,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.b$points[,1],EUK.GC1.nMDS.b$points[,2],pch=16)
EUK.GC1.nMDS.j <- metaMDS(vegdist(t(prop.table(as.matrix(EUK.GC1.avr[,!colnames(EUK.GC1.avr) %in% c("GC1_116","GC1_140")]),2)),method = "jaccard",binary=TRUE),k=2,trymax = 200,parallel=8)
plot(EUK.GC1.nMDS.j$points[,1],EUK.GC1.nMDS.j$points[,2],pch=16)
EUK.PC19.nMDS.b <- metaMDS(t(prop.table(as.matrix(EUK.P19.avr),2)),k=3,trymax = 200,parallel=8)
plot(EUK.PC19.nMDS.b$points[,1],EUK.PC19.nMDS.b$points[,2],pch=16)
EUK.PC19.nMDS.j <- metaMDS(vegdist(t(prop.table(as.matrix(EUK.P19.avr),2)),method = "jaccard",binary=TRUE),k=2,trymax = 200,parallel=8)
plot(EUK.PC19.nMDS.j$points[,1],EUK.PC19.nMDS.j$points[,2],pch=16)
