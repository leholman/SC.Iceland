axis(1,at=seq(-1500,2000,500),labels = number_to_CE_label(seq(-1500,2000,500)))
points(1950-ages$mean[match(names(EUK.GC1.avr),ages$ID2)],EUK.GC1.avr[1,],pch=16,col="cadetblue4")
dev.off()
plot(1950-ages$mean[match(names(EUK.P19.avr),ages$ID2)],EUK.P19.avr[227,],pch=16,ylab="Propotion of reads",xlab="Year",xaxt = "n",xlim=c(-1600,2000),ylim=c(0,1),col="navyblue")
axis(1,at=seq(-1500,2000,500),labels = number_to_CE_label(seq(-1500,2000,500)))
points(1950-ages$mean[match(names(EUK.GC1.avr),ages$ID2)],EUK.GC1.avr[227,],pch=16,col="cadetblue4")
plot(1950-ages$mean[match(names(EUK.P19.avr),ages$ID2)],EUK.P19.avr[227,],pch=16,ylab="Propotion of reads",xlab="Year",xaxt = "n",xlim=c(-1600,2000),ylim=c(0,1),col="navyblue")
plot(1950-ages$mean[match(names(EUK.P19.avr),ages$ID2)],EUK.P19.avr[227,],pch=16,ylab="Propotion of reads",xlab="Year",xaxt = "n",xlim=c(-1600,2000),col="navyblue")
axis(1,at=seq(-1500,2000,500),labels = number_to_CE_label(seq(-1500,2000,500)))
points(1950-ages$mean[match(names(EUK.GC1.avr),ages$ID2)],EUK.GC1.avr[227,],pch=16,col="cadetblue4")
loopASVs <- 227
loopData1 <- colSums(EUK.P19[loopASVs,])
loopData1 <- tapply(loopData1 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData1)), sum)
loopData2 <- colSums(EUK.GC1[loopASVs,])
loopData2 <- tapply(loopData2 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData2)), sum)
year1 <- 1950-ages$mean[match(names(loopData1),ages$ID2)]
value1 <- as.numeric(loopData1)
year2 <- 1950-ages$mean[match(names(loopData2),ages$ID2)]
value2 <- as.numeric(loopData2)
gam1 <- gam(value1 ~ s(year1,k=20), method = "REML")
gam2 <- gam(value2 ~ s(year2,k=20), method = "REML")
plot(gam1)
plot(gam2)
prediction <- data.frame("year1"=-1103:1725)
prediction <- cbind(prediction,predict(gam1,newdata = prediction,se.fit = TRUE))
prediction$uppCI <- prediction$fit+prediction$se.fit*1.96
prediction$lwrCI <- prediction$fit-prediction$se.fit*1.96
prediction2 <- data.frame("year2"=-1561:1668)
prediction2 <- cbind(prediction2,predict(gam2,newdata = prediction2,se.fit = TRUE))
prediction2$uppCI <- prediction2$fit+prediction2$se.fit*1.96
prediction2$lwrCI <- prediction2$fit-prediction2$se.fit*1.96
pdf("figures/composite/p.periphyllaDNA.pdf",height=4,width=10)
par(mar=c(4.1,4.1,2.1,6.1))
plot(year1,value1,pch=16,col="slateblue",ylim=c(0,8),
xlim=c(-1550,2000),bty = 'n',xaxt="n",yaxt='n',ylab="P.periphylla DetectionProp",xlab="",col.lab ="navyblue")
axis(2,at=c(0,2,4,6,8),label=c(0,0.25,0.5,0.75,1.0),las=1,cex.axis=0.8)
axis(1,at=seq(-1500,2000,500),labels=paste0(sqrt(seq(-1500,2000,500)^2),c("BCE","BCE","BCE","","CE","CE","CE","CE")),lwd.ticks = 2,cex=2)
points(year2,value2,pch=16,col="lightblue4")
abline(h=4,lty=2,col="grey")
polygon(c(prediction$year, rev(prediction$year)), c(prediction$uppCI, rev(prediction$lwrCI)), col=add.alpha('mediumslateblue',0.3), border=NA)
points(prediction$year,prediction$fit,type="l",col="navyblue",lwd=3)
polygon(c(prediction2$year, rev(prediction2$year)), c(prediction2$uppCI, rev(prediction2$lwrCI)), col=add.alpha('lightblue4',0.3), border=NA)
points(prediction2$year,prediction2$fit,type="l",col="cadetblue4",lwd=3)
par(mfrow=c(4,2))
for (num in 0:7){
EUK.P19.avr.filt <- EUK.P19.avr
EUK.P19.avr.filt[EUK.P19.nREPS < num] <- 0
plot(1950-ages$median[match(gsub("(.*)_[0-9]$","\\1",colnames(EUK.P19.avr.filt)),ages$ID2)],colSums(make_binary(EUK.P19.avr.filt*100000000000,1)),ylab="",xlab="")
}
#GC1
par(mfrow=c(4,2))
for (num in 0:7){
EUK.GC1.avr.filt <- EUK.GC1.avr
EUK.GC1.avr.filt[EUK.GC1.nREPS < num] <- 0
plot(1950-ages$median[match(gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1.avr.filt)),ages$ID2)],colSums(make_binary(EUK.P19.avr.filt*100000000000,1)),ylab="",xlab="",pch=16)
}
#GC1
par(mfrow=c(4,2))
for (num in 0:7){
EUK.GC1.avr.filt <- EUK.GC1.avr
EUK.GC1.avr.filt[EUK.GC1.nREPS < num] <- 0
plot(1950-ages$median[match(gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1.avr.filt)),ages$ID2)],colSums(make_binary(EUK.GC1.avr.filt*100000000000,1)),ylab="",xlab="",pch=16)
}
#GC1
par(mfrow=c(4,2))
for (num in 0:7){
EUK.GC1.avr.filt <- EUK.GC1.avr
EUK.GC1.avr.filt[EUK.GC1.nREPS < num] <- 0
plot(1950-ages$median[match(gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1.avr.filt)),ages$ID2)],colSums(make_binary(EUK.GC1.avr.filt*100000000000,1)),ylab="",xlab="",pch=16,main=paste0("> ",num," +ive reps"))
}
## lets do one of EUK cod first
taxa <- "Gadus"
loopASVs <- EUKtax.h$OTU[EUKtax.h$Assignment==taxa]
### lets make some fish plots
EUKtax.h <- read.csv("taxonomy/byHand/EUKtax_assigned1006.csv")
## lets do one of EUK cod first
taxa <- "Gadus"
loopASVs <- EUKtax.h$OTU[EUKtax.h$Assignment==taxa]
## now clupea
taxa <- "Clupea"
loopASVs <- EUKtax.h$OTU[EUKtax.h$Assignment==taxa]
GC01 <- read.csv("cleaneddata/combinedcoredata/EUK.GC01.csv",row.names = 1)
PC19 <- read.csv("cleaneddata/combinedcoredata/EUK.PC019.csv",row.names = 1)
dim(GC01)[2]
dim(PC19)[2]
dim(GC01)[2]
dim(PC19)[2]
dim(GC01)[2]/8
dim(PC19)[2]/8
####====0.1 Packages====####
library(vegan)
library(RColorBrewer)
library(breakaway)
library("mgcv")
library("Biostrings")
library("seqinr")
####====0.2 Functions====####
NrepsMaker <- function(INdataframe,vector){
##write these checks
#check the dataframe is a dataframe
if(!is.data.frame(INdataframe)){stop("Input dataframe doesn't look like a dataframe")}
#check the vector is a vector
if(!is.vector(vector)){stop("Input vector doesn't look like a vector")}
#check the dataframe contains the vector
## TO DO
#make a new dataframe to captuire the output
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
#name stuff
colnames(newDataFrame) <- unique(vector)
rownames(newDataFrame) <- rownames(INdataframe)
#make it binary
INdataframe[INdataframe<1] <- 0
INdataframe[INdataframe>0] <- 1
#loop over all the samples with replicates, summing according to the vector
for (column in 1:length(newDataFrame[1,])){
# this if statement checks in case there is only one replicate remaining (this sometimes happens in controls)
if(is.vector(INdataframe[,vector %in% colnames(newDataFrame)[column]])){
newDataFrame[,column]  <- INdataframe[,vector %in% colnames(newDataFrame)[column]]}else{
newDataFrame[,column] <- rowSums(INdataframe[,vector %in% colnames(newDataFrame)[column]])}
}
return(newDataFrame)
}
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
minAbundance <- function(inputtable = NA, minAbun = 0.01) {
others <- rep(0, ncol(inputtable))
for (col in 1:ncol(inputtable)) {
threshold = sum(inputtable[, col]) * minAbun
below_threshold_indices = inputtable[, col] < threshold
others[col] = sum(inputtable[below_threshold_indices, col])
inputtable[below_threshold_indices, col] = 0
}
inputtable <- rbind(inputtable, others)
rownames(inputtable)[nrow(inputtable)] = "Others"
# Remove rows that sum to zero
inputtable <- inputtable[rowSums(inputtable) != 0, ]
return(inputtable)
}
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
average_by_reps <- function (df,sampleIndex){
# Check if the dataframe and cols have compatible sizes
if (ncol(df) != length(sampleIndex)) {
stop("The number of columns in the dataframe must match the length of the vector")
}
# Get unique sample names
unique_samples <- unique(sampleIndex)
# Initialize the output dataframe
avg_df <- data.frame(matrix(ncol = length(unique_samples), nrow = nrow(df)))
colnames(avg_df) <- unique_samples
# Compute averages for each sample
for (sample in unique_samples) {
indices <- which(sampleIndex == sample)  # Get indices for columns corresponding to this sample
if (length(indices) == 1) {
# If only one column, use it directly
avg_df[, sample] <- df[, indices, drop = FALSE]
} else {
# Compute row means for multiple columns
avg_df[, sample] <- rowMeans(df[, indices, drop = FALSE], na.rm = TRUE)
}
}
return(avg_df)
}
map_values_to_colors <- function(values, color1, color2) {
# Create a palette function with the two colors
palette <- colorRampPalette(c(color1, color2))
# Compute the number of unique values
num_colors <- length(unique(values))
# Generate the colors from the palette
colors <- palette(num_colors)
# Normalize the values to range from 1 to num_colors
scaled_values <- cut(values, breaks = pretty(range(values), num_colors), labels = FALSE)
# Assign colors based on scaled values
assigned_colors <- colors[scaled_values]
return(assigned_colors)
}
plot_with_gradient_legend <- function(values, color1, color2) {
# Use the mapping function to get assigned colors
assigned_colors <- map_values_to_colors(values, color1, color2)
# Define the gradient legend parameters
num_colors <- length(unique(values))
colors <- colorRampPalette(c(color1, color2))(num_colors)  # Recreate palette for the legend
legend_height <- (par("usr")[4] - par("usr")[3]) / 8  # 1/8 of the plot window height
legend_width <- 0.1 * (par("usr")[2] - par("usr")[1])  # Relative width of the legend
# Position of the legend at the bottom left
legend_x <- par("usr")[1] + 0.02 * (par("usr")[2] - par("usr")[1])  # Slightly offset from the left
legend_y <- par("usr")[3] + 0.02 * (par("usr")[4] - par("usr")[3])  # Slightly offset from the bottom
# Draw the gradient legend
for (i in 1:num_colors) {
rect_x <- legend_x
rect_y <- legend_y + (i-1) * (legend_height / num_colors)
rect(rect_x, rect_y, rect_x + legend_width, rect_y + (legend_height / num_colors), col = colors[i], border = NA)
}
# Labeling the min and max values at the bottom and top of the legend
text(legend_x + legend_width / 2, legend_y - 0.1 * legend_height, labels = min(values), cex = 0.8, adj = 0.5)
text(legend_x + legend_width / 2, legend_y + legend_height + 0.05 * legend_height, labels = max(values), cex = 0.8, adj = 0.5)
}
add.alpha <- function(col, alpha=1){
if(missing(col))
stop("Please provide a vector of colours.")
apply(sapply(col, col2rgb)/255, 2,
function(x)
rgb(x[1], x[2], x[3], alpha=alpha))
}
# Here is a function to create labels from dates in numeric form such that +ive numbers give CE and -ive numbers give BCE
number_to_CE_label <- function(numbers) {
# Create an empty character vector to store the labels
labels <- character(length(numbers))
# Loop through each number in the vector
for (i in seq_along(numbers)) {
if (numbers[i] >= 0) {
labels[i] <- paste(numbers[i], "CE")
} else {
labels[i] <- paste(abs(numbers[i]), "BCE")
}
}
return(labels)
}
####====0.3 Data Prep====####
ages <- read.csv("metadata/AgeOut.csv")
ages$ID2 <- gsub("-","_",ages$ID)
EUK.tax.PR2 <- read.csv("taxonomy/EUK.cleaned.PR2.csv",row.names = 1)
EUK.tax.PR2.cat <- read.csv("taxonomy/functionalAnno/EUK.cleaned.PR2.cat.csv",row.names = 1)
climate <- read.csv("metadata/climate.csv",row.names = 1)
## EUK datasets
EUK.GC1 <- read.csv("cleaneddata/combinedcoredata/EUK.GC01.csv",row.names = 1)
EUK.GC1.nREPS <- NrepsMaker(EUK.GC1,gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1)))
EUK.GC1.avr <- average_by_reps(prop.table(as.matrix(EUK.GC1),2),gsub("(.*)_[0-9]$","\\1",colnames(EUK.GC1)))
EUK.GC1.bin <- make_binary(EUK.GC1,1)
EUK.GC1.ages <- ages$median[match(colnames(EUK.GC1.avr),ages$ID2)]
EUK.P19 <- read.csv("cleaneddata/combinedcoredata/EUK.PC019.csv",row.names = 1)
EUK.P19.nREPS <- NrepsMaker(EUK.P19,gsub("(.*)_[0-9]$","\\1",colnames(EUK.P19)))
EUK.P19.avr <- average_by_reps(prop.table(as.matrix(EUK.P19),2),gsub("(.*)_[0-9]$","\\1",colnames(EUK.P19)))
EUK.P19.bin <- make_binary(EUK.P19,1)
EUK.P19.ages <- ages$median[match(colnames(EUK.P19.avr),ages$ID2)]
#make subsets per taxonomic group
##P19
EUK.p19.avr.bac <- EUK.P19.avr[match(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain=="Bacteria" & EUK.tax.PR2$Domain.1>80],EUK.tax.PR2$X.1),]
row.names(EUK.p19.avr.bac) <- EUK.tax.PR2$X.1[EUK.tax.PR2$Domain=="Bacteria" & EUK.tax.PR2$Domain.1>80]
EUK.p19.avr.met <- EUK.P19.avr[match(na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Subdivision=="Metazoa" & EUK.tax.PR2$Subdivision>80]),EUK.tax.PR2$X.1),]
row.names(EUK.p19.avr.met) <- na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Subdivision=="Metazoa" & EUK.tax.PR2$Subdivision>80])
EUK.p19.avr.pro <- EUK.P19.avr[match(na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain!="Bacteria" & EUK.tax.PR2$Subdivision!="Metazoa" & EUK.tax.PR2$Subdivision!="Fungi" & EUK.tax.PR2$Subdivision>80]),EUK.tax.PR2$X.1),]
row.names(EUK.p19.avr.pro) <- na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain!="Bacteria" & EUK.tax.PR2$Subdivision!="Metazoa" & EUK.tax.PR2$Subdivision!="Fungi" & EUK.tax.PR2$Subdivision>80])
#GC1
EUK.GC1.avr.bac <- EUK.GC1.avr[match(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain=="Bacteria" & EUK.tax.PR2$Domain.1>80],EUK.tax.PR2$X.1),]
row.names(EUK.GC1.avr.bac) <- EUK.tax.PR2$X.1[EUK.tax.PR2$Domain=="Bacteria" & EUK.tax.PR2$Domain.1>80]
EUK.GC1.avr.met <- EUK.GC1.avr[match(na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Subdivision=="Metazoa" & EUK.tax.PR2$Subdivision>80]),EUK.tax.PR2$X.1),]
row.names(EUK.GC1.avr.met) <- na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Subdivision=="Metazoa" & EUK.tax.PR2$Subdivision>80])
EUK.GC1.avr.pro <- EUK.GC1.avr[match(na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain!="Bacteria" & EUK.tax.PR2$Subdivision!="Metazoa" & EUK.tax.PR2$Subdivision!="Fungi" & EUK.tax.PR2$Subdivision>80]),EUK.tax.PR2$X.1),]
row.names(EUK.GC1.avr.pro) <- na.omit(EUK.tax.PR2$X.1[EUK.tax.PR2$Domain!="Bacteria" & EUK.tax.PR2$Subdivision!="Metazoa" & EUK.tax.PR2$Subdivision!="Fungi" & EUK.tax.PR2$Subdivision>80])
### MAM datasets
MAM.P19 <- read.csv("cleaneddata/combinedcoredata/MAM.PC019.csv",row.names = 1)
MAM.P19.nREPS <- NrepsMaker(MAM.P19,gsub("(.*)_[0-9]$","\\1",colnames(MAM.P19)))
MAM.GC1 <- read.csv("cleaneddata/combinedcoredata/MAM.GC01.csv",row.names = 1)
MAM.GC1.nREPS <- NrepsMaker(MAM.GC1,gsub("(.*)_[0-9]$","\\1",colnames(MAM.GC1)))
### RIZ datasets
RIZ.P19 <- read.csv("cleaneddata/combinedcoredata/RIZ.PC019.csv",row.names = 1)
RIZ.P19.nREPS <- NrepsMaker(RIZ.P19,gsub("(.*)_[0-9]$","\\1",colnames(RIZ.P19)))
RIZ.GC1 <- read.csv("cleaneddata/combinedcoredata/RIZ.GC01.csv",row.names = 1)
RIZ.GC1.nREPS <- NrepsMaker(RIZ.GC1,gsub("(.*)_[0-9]$","\\1",colnames(RIZ.GC1)))
###Make taxonomic files
EUKtax <- read.csv("taxonomy/EUK.combined.parsed.csv")
EUKasv <- readDNAStringSet("cleaneddata/ASVs/EUK.cleaned.fasta")
EUKtax$ASVseq <- as.character(EUKasv)[match(EUKtax$OTU,names(EUKasv))]
write.csv(EUKtax,file = "taxonomy/byHand/EUKtax.csv")
MAMtax <- read.csv("taxonomy/MAM.combined.parsed.csv")
MAMasv <- readDNAStringSet("cleaneddata/ASVs/MAM.cleaned.fasta")
MAMtax$ASVseq <- as.character(MAMasv)[match(MAMtax$OTU,names(MAMasv))]
write.csv(MAMtax,file = "taxonomy/byHand/MAMtax.csv")
RIZtax <- read.csv("taxonomy/RIZ.combined.parsed.csv")
RIZasv <- readDNAStringSet("cleaneddata/ASVs/RIZ.cleaned.fasta")
RIZtax$ASVseq <- as.character(RIZasv)[match(RIZtax$OTU,names(RIZasv))]
write.csv(RIZtax,file = "taxonomy/byHand/RIZtax.csv")
####====4.0 Specific taxa ====####
### lets make some fish plots
EUKtax.h <- read.csv("taxonomy/byHand/EUKtax_assigned1006.csv")
for (taxa in unique(EUKtax.h$Assignment[EUKtax.h$Level=="Genus"])){
loopASVs <- EUKtax.h$OTU[EUKtax.h$Assignment==taxa]
loopData1 <- colSums(EUK.P19[loopASVs,])
loopData1 <- tapply(loopData1 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData1)), sum)
loopData2 <- colSums(EUK.GC1[loopASVs,])
loopData2 <- tapply(loopData2 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData2)), sum)
pdf(paste0("figures/SpecificTaxa/EUK.",taxa,".pdf"),height=7,width = 9)
par(mfrow=c(2,1),mar=c(4.1, 4.1, 1.1, 1.1))
plot(1950-ages$mean[match(names(loopData1),ages$ID2)],jitter(as.numeric(loopData1)),main=paste0("PC19 Genus:",taxa),pch=16,xlab="Year (CE)",ylab="replicates +ive",xlim=c(-1550,1700))
plot(1950-ages$mean[match(names(loopData2),ages$ID2)],jitter(as.numeric(loopData2)),main=paste0("GC01 Genus:",taxa),pch=16,xlab="Year (CE)",ylab="replicates +ive",xlim=c(-1550,1700))
dev.off()
}
for (taxa in unique(EUKtax.h$Assignment[EUKtax.h$Level=="Family"])){
loopASVs <- EUKtax.h$OTU[EUKtax.h$Assignment==taxa]
loopData1 <- colSums(EUK.P19[loopASVs,])
loopData1 <- tapply(loopData1 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData1)), sum)
loopData2 <- colSums(EUK.GC1[loopASVs,])
loopData2 <- tapply(loopData2 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData2)), sum)
pdf(paste0("figures/SpecificTaxa/EUK.",taxa,".pdf"),height=7,width = 9)
par(mfrow=c(2,1),mar=c(4.1, 4.1, 1.1, 1.1))
plot(1950-ages$mean[match(names(loopData1),ages$ID2)],jitter(as.numeric(loopData1)),main=paste0("PC19 Family:",taxa),pch=16,xlab="Year (CE)",ylab="replicates +ive",xlim=c(-1550,1700))
plot(1950-ages$mean[match(names(loopData2),ages$ID2)],jitter(as.numeric(loopData2)),main=paste0("GC01 Family:",taxa),pch=16,xlab="Year (CE)",ylab="replicates +ive",xlim=c(-1550,1700))
dev.off()
}
for (taxa in unique(EUKtax.h$Assignment[EUKtax.h$Level=="Order"])){
loopASVs <- EUKtax.h$OTU[EUKtax.h$Assignment==taxa]
loopData1 <- colSums(EUK.P19[loopASVs,])
loopData1 <- tapply(loopData1 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData1)), sum)
loopData2 <- colSums(EUK.GC1[loopASVs,])
loopData2 <- tapply(loopData2 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData2)), sum)
pdf(paste0("figures/SpecificTaxa/EUK.",taxa,".pdf"),height=7,width = 9)
par(mfrow=c(2,1),mar=c(4.1, 4.1, 1.1, 1.1))
plot(1950-ages$mean[match(names(loopData1),ages$ID2)],jitter(as.numeric(loopData1)),main=paste0("PC19 Order:",taxa),pch=16,xlab="Year (CE)",ylab="replicates +ive",xlim=c(-1550,1700))
plot(1950-ages$mean[match(names(loopData2),ages$ID2)],jitter(as.numeric(loopData2)),main=paste0("GC01 Order:",taxa),pch=16,xlab="Year (CE)",ylab="replicates +ive",xlim=c(-1550,1700))
dev.off()
}
### Some plots for the composite plot
## lets do one of EUK cod first
taxa <- "Gadus"
loopASVs <- EUKtax.h$OTU[EUKtax.h$Assignment==taxa]
loopData1 <- colSums(EUK.P19[loopASVs,])
loopData1 <- tapply(loopData1 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData1)), sum)
loopData2 <- colSums(EUK.GC1[loopASVs,])
loopData2 <- tapply(loopData2 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData2)), sum)
year1 <- 1950-ages$mean[match(names(loopData1),ages$ID2)]
value1 <- as.numeric(loopData1)
year2 <- 1950-ages$mean[match(names(loopData2),ages$ID2)]
value2 <- as.numeric(loopData2)
gam1 <- gam(value1 ~ s(year1,k=20), method = "REML")
gam2 <- gam(value2 ~ s(year2,k=20), method = "REML")
plot(gam1)
plot(gam2)
prediction <- data.frame("year1"=-1103:1725)
prediction <- cbind(prediction,predict(gam1,newdata = prediction,se.fit = TRUE))
prediction$uppCI <- prediction$fit+prediction$se.fit*1.96
prediction$lwrCI <- prediction$fit-prediction$se.fit*1.96
prediction2 <- data.frame("year2"=-1561:1668)
prediction2 <- cbind(prediction2,predict(gam2,newdata = prediction2,se.fit = TRUE))
prediction2$uppCI <- prediction2$fit+prediction2$se.fit*1.96
prediction2$lwrCI <- prediction2$fit-prediction2$se.fit*1.96
pdf("figures/composite/codDNA.pdf",height=3,width=10)
## now clupea
taxa <- "Clupea"
loopASVs <- EUKtax.h$OTU[EUKtax.h$Assignment==taxa]
loopData1 <- colSums(EUK.P19[loopASVs,])
loopData1 <- tapply(loopData1 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData1)), sum)
loopData2 <- colSums(EUK.GC1[loopASVs,])
loopData2 <- tapply(loopData2 > 0, gsub("(.*)_[0-9]$","\\1",names(loopData2)), sum)
year1 <- 1950-ages$mean[match(names(loopData1),ages$ID2)]
value1 <- as.numeric(loopData1)
year2 <- 1950-ages$mean[match(names(loopData2),ages$ID2)]
value2 <- as.numeric(loopData2)
gam1 <- gam(value1 ~ s(year1,k=20), method = "REML")
gam2 <- gam(value2 ~ s(year2,k=20), method = "REML")
plot(gam1)
plot(gam2)
prediction <- data.frame("year1"=-1103:1725)
prediction <- cbind(prediction,predict(gam1,newdata = prediction,se.fit = TRUE))
prediction$uppCI <- prediction$fit+prediction$se.fit*1.96
prediction$lwrCI <- prediction$fit-prediction$se.fit*1.96
prediction2 <- data.frame("year2"=-1561:1668)
prediction2 <- cbind(prediction2,predict(gam2,newdata = prediction2,se.fit = TRUE))
prediction2$uppCI <- prediction2$fit+prediction2$se.fit*1.96
prediction2$lwrCI <- prediction2$fit-prediction2$se.fit*1.96
lmdata <- data.frame(detections=c(loopData1,loopData2),
climate.TF=c(climate$MD99.2275sstDiatom.100yrspline[match(gsub("_","-",names(loopData1)),climate$Sample)],climate$MD99.2275sstDiatom.100yrspline[match(gsub("_","-",names(loopData2)),climate$Sample)]),
climate.AK=c(climate$MD99.2275sstAlkenone.100yrspline[match(gsub("_","-",names(loopData1)),climate$Sample)],climate$MD99.2275sstAlkenone.100yrspline[match(gsub("_","-",names(loopData2)),climate$Sample)]),
core=c(rep("PC19",length(loopData1)),rep("GC01",length(loopData2))))
lmdata$climate <- (lmdata$climate.TF+lmdata$climate.AK)/2
summary(lm(detections~climate*core,data=lmdata))
lm1 <- lm(detections~climate*core,data=lmdata)
summary(lm(detections~climate*core + climate,data=lmdata))
summary(lm(detections~climate*core,data=lmdata))
nisp <- read.csv("rawdata/human/NISP.csv")
View(nisp)
nispout <- data.frame("cent"=unique(nisp$Century))
nisp.out <- data.frame("cent"=unique(nisp$Century))
View(nisp.out)
mean(dat)
dat <- c(2,4,7,8)
weigth <- c(1,1,6,0.1)
mean(dat)
sum(dat)/length(dat)
sum(dat*weigth)/length(dat)
weigth/sum(weigth)
sum(dat*(weigth/sum(weigth)))/length(dat)
sum(dat * weigth) / sum(weigth)
dat <- c(2,4,7,8)
weigth <- c(6,1,6,0.1)
mean(dat)
sum(dat * weigth) / sum(weigth)
nisp.out$cent
nisp$Century=="9c"
str(nisp)
sum(nisp$Marine.Fish+nisp$Terrestrial.Mammals)
nisp$Marine.Fish+nisp$Terrestrial.Mammals
View(nisp.out)
nisp.out <- data.frame("cent"=unique(nisp$Century),
"NISPter"=rep(0,length(unique(nisp$Century))),
"NISPmar"=rep(0,length(unique(nisp$Century))),
"meanMarProp"=rep(0,length(unique(nisp$Century))))
View(nisp.out)
cent <- "11c"
loopdat <- nisp[nisp$Century==cent,]
View(loopdat)
nisp.out$NISPter[nisp$cent==cent]
nisp.out$NISPter[nisp$cent==cent] <- sum(loopdat$Terrestrial.Mammals.NISP*loopdat$Spread)
nisp.out$NISPmar[nisp$cent==cent] <- sum(loopdat$Marine.Fish.NISP*loopdat$Spread)
View(nisp.out)
sum(loopdat$Terrestrial.Mammals.NISP*loopdat$Spread)
nisp.out$cent
nisp.out$cent==cent
nisp.out$NISPter[nisp.out$cent==cent] <- sum(loopdat$Terrestrial.Mammals.NISP*loopdat$Spread)
nisp.out$NISPmar[nisp.out$cent==cent] <- sum(loopdat$Marine.Fish.NISP*loopdat$Spread)
View(nisp.out)
nisp.out$meanMarProp[nisp.out$cent==cent] <- sum(loopdat$Marine.Fish*loopdat$Spread) / sum(loopdat$Spread)
for (cent in nisp.out$cent){
loopdat <- nisp[nisp$Century==cent,]
nisp.out$NISPter[nisp.out$cent==cent] <- sum(loopdat$Terrestrial.Mammals.NISP*loopdat$Spread)
nisp.out$NISPmar[nisp.out$cent==cent] <- sum(loopdat$Marine.Fish.NISP*loopdat$Spread)
nisp.out$meanMarProp[nisp.out$cent==cent] <- sum(loopdat$Marine.Fish*loopdat$Spread) / sum(loopdat$Spread)
}
View(nisp.out)
plot(nisp.out$meanMarProp)
plot(nisp.out$NISPter/(nisp.out$NISPter+nisp.out$NISPmar))
plot(nisp.out$NISPmar/(nisp.out$NISPter+nisp.out$NISPmar))
nisp.out$meanTarProp <- 100-nisp.out$meanMarProp
View(nisp.out)
barplot(nisp.out[,4:5])
barplot(as.matrix(nisp.out[,4:5]))
barplot(t(as.matrix(nisp.out[,4:5])))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("orange","orange4"))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("orange","orange4"),names.arg = nisp.out$cent )
barplot(t(as.matrix(nisp.out[,4:5])),col=c("orange","orange4"),names.arg = nisp.out$cent,lwd='n' )
barplot(t(as.matrix(nisp.out[,4:5])),col=c("orange","orange4"),names.arg = nisp.out$cent,border=NA)
axis(4,at=seq(0,100,20),label=seq(0,100,20))
axis(4,at=seq(0,100,20),label=seq(0,100,20),lty=2)
axis(4,at=seq(0,100,20),label=seq(0,100,20),las=2)
pdf("figures/Fig1/HumDiet.pdf",height=3,width=4.5)
barplot(t(as.matrix(nisp.out[,4:5])),col=c("orange","orange4"),names.arg = nisp.out$cent,border=NA)
axis(4,at=seq(0,100,20),label=seq(0,100,20),las=2)
dev.off()
pdf("figures/Fig1/HumDiet.pdf",height=3,width=4.5)
par(mar=c(2.1,2.1,2.1,6.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("orange","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
axis(4,at=seq(0,100,20),label=seq(0,100,20),las=2)
dev.off()
pdf("figures/Fig1/HumDiet.pdf",height=3,width=4.5)
par(mar=c(1.1,1.1,1.1,3.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("orange","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
axis(4,at=seq(0,100,20),label=seq(0,100,20),las=2)
dev.off()
pdf("figures/Fig1/HumDiet.pdf",height=2,width=4.5)
par(mar=c(1.1,1.1,1.1,3.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("orange","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
axis(4,at=seq(0,100,20),label=seq(0,100,20),las=2)
dev.off()
pdf("figures/Fig1/HumDiet.pdf",height=2,width=4.5)
par(mar=c(1.1,1.1,1.1,3.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("yellow3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
axis(4,at=seq(0,100,20),label=seq(0,100,20),las=2)
dev.off()
pdf("figures/Fig1/HumDiet.pdf",height=2,width=4.5)
par(mar=c(1.1,1.1,1.1,3.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
#axis(4,at=seq(0,100,20),label=seq(0,100,20),las=2)
dev.off()
troph <- read.csv("rawdata/human/FishIsotopes.csv")
View(nisp.out)
View(nisp.out)
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
par(mfrow=c(1,2))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
par(mfrow=c(2,1))
#axis(4,at=seq(0,100,20),label=seq(0,100,20),las=2)
dev.off()
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
nisp.out[,3]
View(nisp.out)
nisp.out[,3]/(nisp.out[,3]+nisp.out[,2])
barplot(t(as.matrix(cbind(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]),100-(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]))))),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
as.matrix(cbind(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]),100-(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]))))
barplot(t(as.matrix(cbind(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]),1-(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]))))),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
barplot(t(as.matrix(cbind(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]),1-(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]))))),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
par(mfrow=c(2,1))
par(mar=c(1.1,1.1,1.1,3.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
barplot(t(as.matrix(cbind(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]),1-(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]))))),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
par(mar=c(1.1,1.1,2.1,3.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
barplot(t(as.matrix(cbind(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]),1-(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]))))),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n")
par(mfrow=c(2,1))
par(mar=c(1.1,1.1,2.1,3.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n",main="Site.Weighted.percent.")
barplot(t(as.matrix(cbind(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]),1-(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]))))),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n",main="‘Raw.NISP.prop")
par(mfrow=c(2,1))
par(mar=c(1.1,1.1,2.1,3.1))
barplot(t(as.matrix(nisp.out[,4:5])),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n",main="Site.Weighted.percent.")
barplot(t(as.matrix(cbind(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]),1-(nisp.out[,3]/(nisp.out[,3]+nisp.out[,2]))))),col=c("darkorange3","orange4"),names.arg = nisp.out$cent,border=NA,yaxt="n",main="Raw.NISP.prop")
