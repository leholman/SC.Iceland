dev.off()
##PC19
EUK.P19.tax.a <- minAbundance(CountTable(as.character(EUK.tax.PR2$Family),EUK.P19.avr,output = "Abundance"),minAbun=0.01)
EUK.P19.tax.c <- minAbundance(CountTable(as.character(EUK.tax.PR2$Family),EUK.P19.avr,output = "Count"),minAbun=0.01)
row.names(EUK.P19.tax.a)[1] <- "Unknown"
row.names(EUK.P19.tax.c)[1] <- "Unknown"
EUK.P19.tax.a <- as.matrix(prop.table(as.matrix(EUK.P19.tax.a[,order(ages$mean[match(colnames(EUK.P19.tax.a),ages$ID2)])]),margin = 2))
EUK.P19.tax.c <- as.matrix(prop.table(as.matrix(EUK.P19.tax.c[,order(ages$mean[match(colnames(EUK.P19.tax.c),ages$ID2)])]),margin = 2))
pdf("figures/EUK.P19.tax.Family.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.P19.tax.a,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.P19.tax.a)[1])),ylab="Read Abundance",names.arg=ages$mean[match(colnames(EUK.P19.tax.a),ages$ID2)])
legend(190,1,rev(rownames(EUK.P19.tax.a)),fill=getPalette(dim(EUK.P19.tax.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(EUK.P19.tax.c,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.P19.tax.c)[1])),ylab="ASV Counts",names.arg=ages$mean[match(colnames(EUK.P19.tax.c),ages$ID2)])
legend(190,1,rev(rownames(EUK.P19.tax.c)),fill=getPalette(dim(EUK.P19.tax.c)[1]),cex=0.5,bty = "n",y.intersp=0.75)
dev.off()
##PC19 cat
EUK.P19.tax.a <- minAbundance(CountTable(as.character(EUK.tax.PR2.cat$cat),EUK.P19.avr,output = "Abundance"),minAbun=0.01)
EUK.P19.tax.c <- minAbundance(CountTable(as.character(EUK.tax.PR2.cat$cat),EUK.P19.avr,output = "Count"),minAbun=0.01)
EUK.P19.tax.a <- as.matrix(prop.table(as.matrix(EUK.P19.tax.a[,order(ages$mean[match(colnames(EUK.P19.tax.a),ages$ID2)])]),margin = 2))
EUK.P19.tax.c <- as.matrix(prop.table(as.matrix(EUK.P19.tax.c[,order(ages$mean[match(colnames(EUK.P19.tax.c),ages$ID2)])]),margin = 2))
pdf("figures/EUK.P19.tax.cat.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.P19.tax.a,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.P19.tax.a)[1])),ylab="Read Abundance",names.arg=1950-ages$mean[match(colnames(EUK.P19.tax.a),ages$ID2)])
legend(190,1,rev(rownames(EUK.P19.tax.a)),fill=getPalette(dim(EUK.P19.tax.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(EUK.P19.tax.c,las=2,cex.names=0.6,col=rev(getPalette(dim(EUK.P19.tax.c)[1])),ylab="ASV Counts",names.arg=1950-ages$mean[match(colnames(EUK.P19.tax.c),ages$ID2)])
legend(190,1,rev(rownames(EUK.P19.tax.c)),fill=getPalette(dim(EUK.P19.tax.c)[1]),cex=0.5,bty = "n",y.intersp=0.75)
dev.off()
#Both
unique_taxa <- sort(unique(c(rownames(EUK.P19.tax.a), rownames(EUK.GC1.tax.a))))
taxa_colors <- setNames(colorRampPalette(brewer.pal(12, "Set1"))(length(unique_taxa)), unique_taxa)
EUK.P19.tax.a <- EUK.P19.tax.a[order(rownames(EUK.P19.tax.a)),]
EUK.GC1.tax.a <- EUK.GC1.tax.a[order(rownames(EUK.GC1.tax.a)),]
pdf("figures/EUK.tax.cat.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.P19.tax.a[,dim(EUK.P19.tax.a)[2]:1],las=2,cex.names=0.6,col=taxa_colors[rownames(EUK.P19.tax.a)],ylab="Read Abundance",border = NA,ylim=c(1,0),yaxt="n",
names.arg=number_to_CE_label(rev(1950-ages$mean[match(colnames(EUK.P19.tax.a),ages$ID2)])))
axis(2,at=seq(0,1,.2),labels=rev(seq(0,1,.2)),las=2)
#legend(190,0.2,unique_taxa,fill=taxa_colors[unique_taxa],cex=0.5,bty = "n",y.intersp=0.75, xpd = TRUE,inset = c(-0.25, 0))
barplot(EUK.GC1.tax.a[,dim(EUK.GC1.tax.a)[2]:1],las=2,cex.names=0.6,col=taxa_colors[rownames(EUK.GC1.tax.a)],ylab="Read Abundance",border = NA,ylim=c(1,0),yaxt="n",
names.arg=number_to_CE_label(rev(1950-ages$mean[match(colnames(EUK.GC1.tax.a),ages$ID2)])))
axis(2,at=seq(0,1,.2),labels=rev(seq(0,1,.2)),las=2)
par(mfrow=c(1, 1))
legend(57,0.3,unique_taxa,col=taxa_colors[unique_taxa],cex=0.7,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
pdf("figures/EUK.tax.cat.big.pdf",width = 22,height = 11)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(EUK.P19.tax.a[,dim(EUK.P19.tax.a)[2]:1],las=2,cex.names=0.6,col=taxa_colors[rownames(EUK.P19.tax.a)],ylab="Read Abundance",border = NA,ylim=c(1,0),yaxt="n",
names.arg=number_to_CE_label(rev(1950-ages$mean[match(colnames(EUK.P19.tax.a),ages$ID2)])))
axis(2,at=seq(0,1,.2),labels=rev(seq(0,1,.2)),las=2)
#legend(190,0.2,unique_taxa,fill=taxa_colors[unique_taxa],cex=0.5,bty = "n",y.intersp=0.75, xpd = TRUE,inset = c(-0.25, 0))
barplot(EUK.GC1.tax.a[,dim(EUK.GC1.tax.a)[2]:1],las=2,cex.names=0.6,col=taxa_colors[rownames(EUK.GC1.tax.a)],ylab="Read Abundance",border = NA,ylim=c(1,0),yaxt="n",
names.arg=number_to_CE_label(rev(1950-ages$mean[match(colnames(EUK.GC1.tax.a),ages$ID2)])))
axis(2,at=seq(0,1,.2),labels=rev(seq(0,1,.2)),las=2)
par(mfrow=c(1, 1))
legend(57,0.3,unique_taxa,col=taxa_colors[unique_taxa],cex=0.7,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
pdf("figures/fig1/EUK.tax.cat.blank.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 7.1),xpd=TRUE)
barplot(EUK.P19.tax.a[,dim(EUK.P19.tax.a)[2]:1],las=2,col=taxa_colors[rownames(EUK.P19.tax.a)],ylab="Relative Abundance",border = NA,ylim=c(1,0),yaxt="n",xaxt = "n")
axis(2,at=seq(0,1,.2),labels=rev(seq(0,1,.2)),las=2,)
barplot(EUK.GC1.tax.a[,dim(EUK.GC1.tax.a)[2]:1],las=2,col=taxa_colors[rownames(EUK.GC1.tax.a)],ylab="Relative Abundance",border = NA,ylim=c(1,0),yaxt="n",xaxt = "n")
axis(2,at=seq(0,1,.2),labels=rev(seq(0,1,.2)),las=2)
par(mfrow=c(1, 1))
legend(57,0.3,unique_taxa,col=taxa_colors[unique_taxa],cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
pdf("figures/fig1/axis.pdf",height=5,width=10)
par(mar=c(4.1,4.1,2.1,6.1))
plot(NA,ylim=c(0,310000),
xlim=c(-1000,1500),
bty = 'n',xaxt='n',yaxt="n",ylab="",xlab="",
type="l",lwd=3,col="orange")
axis(1,at=seq(-1000,1500,500),labels=paste0(sqrt(seq(-1000,1200,500)^2),c("BCE","BCE","","CE","CE","CE")),lwd.ticks = 2,cex=2,lwd=0)
dev.off()
paste0(sqrt(seq(-1000,1200,500)^2),c("BCE","BCE","","CE","CE","CE"))
pdf("figures/fig1/axis.pdf",height=5,width=10)
par(mar=c(4.1,4.1,2.1,6.1))
plot(NA,ylim=c(0,310000),
xlim=c(-1000,1500),
bty = 'n',xaxt='n',yaxt="n",ylab="",xlab="",
type="l",lwd=3,col="orange")
axis(1,at=seq(-1000,1500,500),labels=paste0(sqrt(seq(-1000,1500,500)^2),c("BCE","BCE","","CE","CE","CE")),lwd.ticks = 2,cex=2,lwd=0)
dev.off()
library(metabarTOAD)
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
## manipulation of data & taxonomy
neg.B5 <- read.csv("cleaneddata/negativedata/neg.B05.EUK.csv",row.names = 2)
neg.B5.dat <- neg.B5[,2:127]
colnames(neg.B5.dat) <- paste0("B5.",colnames(neg.B5.dat))
neg.L1 <- read.csv("cleaneddata/negativedata/neg.LN1.EUK.csv",row.names = 2)
neg.L1.dat <- neg.L1[,2:72]
colnames(neg.L1.dat) <- paste0("L1.",colnames(neg.L1.dat))
neg.L2 <- read.csv("cleaneddata/negativedata/neg.LN2.EUK.csv",row.names = 2)
neg.L2.dat <- neg.L2[,2:87]
colnames(neg.L2.dat) <- paste0("L2.",colnames(neg.L2.dat))
allNeg.t.tax <- read.csv("cleaneddata/negativedata/EUK.all.tax.csv",row.names = 1)
allNeg.t.tax.b <- make_binary(allNeg.t.tax,1)
colSums(allNeg.t.tax.b)
View(allNeg.t.tax.b)
View(allNeg.t.tax)
allNeg.t.tax.b[,283:301]
allNeg.t.tax[,283:301]
test <- allNeg.t.tax[,283:301]
View(test)
test <- allNeg.t.tax[,284:301]
View(test)
neg.dat <- allNeg.t.tax[,1:283]
neg.tax <- allNeg.t.tax[,284:301]
## Total number of reads
sum(neg.dat)
View(neg.dat)
grep===")
grep(".*B[0-9].*",colnames(neg.dat))
grep("B[0-9]",colnames(neg.dat))
grep("B[0-9]|Blank",colnames(neg.dat))
# Reads from extraction
sum(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))])
## Reads from PCR
sum(neg.dat[,!grep("B[0-9]|Blank",colnames(neg.dat))])
## Reads from PCR
sum(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])
rowsum(neg.dat)==0
rowsum(neg.dat)=0
rowSums(neg.dat)=0
rowSums(neg.dat)==0
table(rowSums(neg.dat)==0)
## How many ASVs
dim(neg.dat)[1]
neg.tax$Domain[neg.tax$Domain.1>0.8]
na.omit(neg.tax$Domain[neg.tax$Domain.1>0.8])
table(na.omit(neg.tax$Domain[neg.tax$Domain.1>0.8]))
na.omit(neg.tax$Class[neg.tax$Class.1>0.8])
unique(na.omit(neg.tax$Class[neg.tax$Class.1>0.8]))
# how many classes
unique(na.omit(neg.tax$Class[neg.tax$Class.1>0.8]))
# how many orders
unique(na.omit(neg.tax$Order[neg.tax$Order.1>0.8]))
# how many families
unique(na.omit(neg.tax$Family[neg.tax$Family.1>0.8]))
# how many genera
unique(na.omit(neg.tax$Genus[neg.tax$Genus.1>0.8]))
# how many classes
length(unique(na.omit(neg.tax$Class[neg.tax$Class.1>0.8])))
# how many orders
length(unique(na.omit(neg.tax$Order[neg.tax$Order.1>0.8])))
# how many families
length(unique(na.omit(neg.tax$Family[neg.tax$Family.1>0.8])))
# how many genera
length(unique(na.omit(neg.tax$Genus[neg.tax$Genus.1>0.8])))
rowSums(neg.dat)
barplot(rowSums(neg.dat))
barplot(cbind(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))],neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))]))
barplot(as.matrix(cbind(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))],neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])))
test <- as.matrix(cbind(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))],neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))]))
barplot(as.matrix(cbind(rowSums(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))]),
rowSums(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))]))))
test <- as.matrix(cbind(rowSums(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))]),
rowSums(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])))
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
minAbundance <- function(inputtable = NA, minAbun = 0.01) {
others <- rep(0, ncol(inputtable))
for (col in 1:ncol(inputtable)) {
threshold = sum(inputtable[, col]) * minAbun
below_threshold_indices = inputtable[, col] < threshold
others[col] = sum(inputtable[below_threshold_indices, col])
inputtable[below_threshold_indices, col] = 0
}
inputtable <- rbind(inputtable, others)
rownames(inputtable)[nrow(inputtable)] = "Others"
# Remove rows that sum to zero
inputtable <- inputtable[rowSums(inputtable) != 0, ]
return(inputtable)
}
table(neg.tax$Family.1>0.8)
as.character(neg.tax$Family)
test <- minAbundance(CountTable(as.character(neg.tax$Family),neg.dat,output = "Abundance"),minAbun=0.01)
View(test)
test <- as.matrix(cbind(rowSums(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))]),
rowSums(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])))
test <- minAbundance(CountTable(as.character(neg.tax$Family),test,output = "Abundance"),minAbun=0.01)
View(test)
barplot(minAbundance(CountTable(as.character(neg.tax$Family),test,output = "Abundance"),minAbun=0.01))
test <- as.matrix(cbind(rowSums(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))]),
rowSums(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])))
barplot(minAbundance(CountTable(as.character(neg.tax$Family),test,output = "Abundance"),minAbun=0.01))
## Lets visualise the data
test <- as.matrix(cbind(rowSums(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))]),
rowSums(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])))
neg.a <- minAbundance(CountTable(as.character(neg.tax$Family),test,output = "Abundance"),minAbun=0.01))
neg.a <- minAbundance(CountTable(as.character(neg.tax$Family),test,output = "Abundance"),minAbun=0.01)
View(neg.a)
plot(neg.a)
barplot(neg.a)
barplot(as.matrix(neg.a))
row.names(neg.a)[1] <- "Unknown"
barplot(as.matrix(neg.a),col=rev(getPalette(dim(EUK.GC1.tax.a)[1])))
library(RColorBrewer)
## Lets visualise the data
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])))
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads")
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"))
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(3,1,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(3,1,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
legend(2,1,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.5,bty = "n",y.intersp=0.75)
legend(2,1,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
par(mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
par(mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
dev.off()
par(mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2,1,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
legend(2,4,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
legend(2,2,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
par(mar=c(5.1, 4.1, 1.1, 12.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2,,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
legend(2,0.3,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
legend(2,0.5,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
legend(2.3,0.5,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
legend(3,0.5,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
legend(3,0.5,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
par(mar=c(5.1, 4.1, 1.1, 12.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(3,0.5,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
legend(3,0.8,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
legend(3,4,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(3,4,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
legend(3,111,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
legend(3,25000,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
legend(2.6,25000,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
rownames(neg.a)
order(rownames(neg.a))
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a))[order(rownames(neg.a))],fill=getPalette(dim(neg.a)[1])[order(rownames(neg.a))],cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
rev(rownames(neg.a))[order(rownames(neg.a))]
rev(rownames(neg.a))
order(rownames(neg.a))
sort(order(rownames(neg.a)))
sort(rownames(neg.a))
match(rownames(neg.a)sort(rownames(neg.a)))
match(rownames(neg.a),sort(rownames(neg.a)))
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a))[match(rownames(neg.a),sort(rownames(neg.a)))],
fill=getPalette(dim(neg.a)[1])[match(rownames(neg.a),sort(rownames(neg.a)))],cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
allNeg.t.tax.b <- make_binary(allNeg.t.tax,1)
match(rownames(neg.a),sort(rownames(neg.a)))
rev(rownames(neg.a))
> rev(rownames(neg.a))[match(rownames(neg.a),sort(rownames(neg.a)))]
rev(rownames(neg.a))[match(rownames(neg.a),sort(rownames(neg.a)))]
rev(rownames(neg.a)[match(rownames(neg.a),sort(rownames(neg.a)))])
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
library(dada2)
library(RColorBrewer)
### some functions
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
minAbundance <- function(inputtable = NA, minAbun = 0.01) {
others <- rep(0, ncol(inputtable))
for (col in 1:ncol(inputtable)) {
threshold = sum(inputtable[, col]) * minAbun
below_threshold_indices = inputtable[, col] < threshold
others[col] = sum(inputtable[below_threshold_indices, col])
inputtable[below_threshold_indices, col] = 0
}
inputtable <- rbind(inputtable, others)
rownames(inputtable)[nrow(inputtable)] = "Others"
# Remove rows that sum to zero
inputtable <- inputtable[rowSums(inputtable) != 0, ]
return(inputtable)
}
allNeg.t.tax <- read.csv("cleaneddata/negativedata/EUK.all.tax.csv",row.names = 1)
neg.dat <- allNeg.t.tax[,1:283]
neg.tax <- allNeg.t.tax[,284:301]
## Total number of reads
sum(neg.dat)
# Reads from extraction
sum(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))])
## Reads from PCR
sum(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])
## How many ASVs
dim(neg.dat)[1]
## How many taxonomically assigned?
# broad taoxnomy
table(na.omit(neg.tax$Domain[neg.tax$Domain.1>0.8]))
# how many classes
length(unique(na.omit(neg.tax$Class[neg.tax$Class.1>0.8])))
# how many orders
length(unique(na.omit(neg.tax$Order[neg.tax$Order.1>0.8])))
# how many families
length(unique(na.omit(neg.tax$Family[neg.tax$Family.1>0.8])))
# how many genera
length(unique(na.omit(neg.tax$Genus[neg.tax$Genus.1>0.8])))
## Lets visualise the data
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
test <- as.matrix(cbind(rowSums(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))]),
rowSums(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])))
neg.a <- minAbundance(CountTable(as.character(neg.tax$Family),test,output = "Abundance"),minAbun=0.01)
row.names(neg.a)[1] <- "Unknown"
par(mar=c(5.1, 4.1, 1.1, 12.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pt.cex = 2,bty = "n", xpd = TRUE)
legend(2.6,25000,rev(rownames(neg.a)),fill=getPalette(dim(neg.a)[1]),cex=0.8,pty=16,pt.cex = 2,bty = "n", xpd = TRUE)
par(mar=c(5.1, 4.1, 1.1, 12.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a)),col=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
pdf("figures/EUK.neg.pdf",height=5,width=6)
par(mar=c(5.1, 4.1, 1.1, 12.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a)),col=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
View(test)
test2 <- cbind(test,neg.tax)
View(test2)
neg.a <- minAbundance(CountTable(as.character(neg.tax$Subdivision),test,output = "Abundance"),minAbun=0.01)
row.names(neg.a)[1] <- "Unknown"
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a)),col=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
neg.a <- minAbundance(CountTable(as.character(neg.tax$Subdivision),test,output = "Abundance"),minAbun=0.01)
row.names(neg.a)[1] <- "Unknown"
pdf("figures/EUK.neg.broad.pdf",height=5,width=6)
par(mar=c(5.1, 4.1, 1.1, 12.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a)),col=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
library(dada2)
library(RColorBrewer)
### some functions
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
minAbundance <- function(inputtable = NA, minAbun = 0.01) {
others <- rep(0, ncol(inputtable))
for (col in 1:ncol(inputtable)) {
threshold = sum(inputtable[, col]) * minAbun
below_threshold_indices = inputtable[, col] < threshold
others[col] = sum(inputtable[below_threshold_indices, col])
inputtable[below_threshold_indices, col] = 0
}
inputtable <- rbind(inputtable, others)
rownames(inputtable)[nrow(inputtable)] = "Others"
# Remove rows that sum to zero
inputtable <- inputtable[rowSums(inputtable) != 0, ]
return(inputtable)
}
# read in data
allNeg.t.tax <- read.csv("cleaneddata/negativedata/EUK.all.tax.csv",row.names = 1)
neg.dat <- allNeg.t.tax[,1:283]
neg.tax <- allNeg.t.tax[,284:301]
## Total number of reads
sum(neg.dat)
# Reads from extraction
sum(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))])
## Reads from PCR
sum(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])
## How many ASVs
dim(neg.dat)[1]
## How many taxonomically assigned?
# broad taoxnomy
table(na.omit(neg.tax$Domain[neg.tax$Domain.1>0.8]))
# how many classes
length(unique(na.omit(neg.tax$Class[neg.tax$Class.1>0.8])))
# how many orders
length(unique(na.omit(neg.tax$Order[neg.tax$Order.1>0.8])))
# how many families
length(unique(na.omit(neg.tax$Family[neg.tax$Family.1>0.8])))
# how many genera
length(unique(na.omit(neg.tax$Genus[neg.tax$Genus.1>0.8])))
## Lets visualise the data
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
test <- as.matrix(cbind(rowSums(neg.dat[,grep("B[0-9]|Blank",colnames(neg.dat))]),
rowSums(neg.dat[,-grep("B[0-9]|Blank",colnames(neg.dat))])))
neg.a <- minAbundance(CountTable(as.character(neg.tax$Family),test,output = "Abundance"),minAbun=0.01)
row.names(neg.a)[1] <- "Unknown"
pdf("figures/SuppNeg/EUK.neg.pdf",height=5,width=6)
par(mar=c(5.1, 4.1, 1.1, 12.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a)),col=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
neg.a <- minAbundance(CountTable(as.character(neg.tax$Subdivision),test,output = "Abundance"),minAbun=0.01)
row.names(neg.a)[1] <- "Unknown"
pdf("figures/SuppNeg/EUK.neg.broad.pdf",height=5,width=6)
par(mar=c(5.1, 4.1, 1.1, 12.1),xpd=TRUE)
barplot(as.matrix(neg.a),col=rev(getPalette(dim(neg.a)[1])),ylab="Reads",names.arg=c("Extraction","PCR"),border = NA)
legend(2.6,25000,rev(rownames(neg.a)),col=getPalette(dim(neg.a)[1]),cex=0.8,pch=15,pt.cex = 2,bty = "n", xpd = TRUE)
dev.off()
View(test)
View(test2)
allNeg.t.tax.b <- make_binary(allNeg.t.tax,1)
colSums(allNeg.t.tax.b)
colSums(allNeg.t.tax.b)
allNeg.t.tax.b <- make_binary(neg.dat,1)
neg.dat.b <- make_binary(neg.dat,1)
colSums(neg.dat.b)
length(colSums(neg.dat.b))
320-length(colSums(neg.dat.b))
rep(0,missingSamples)
missingSamples <- 320-length(colSums(neg.dat.b))
rep(0,missingSamples)
neg.dat.b.2 <- c(neg.dat.b,rep(0,missingSamples))
View(neg.dat.b.2)
neg.dat.b.2 <- c(colSums(neg.dat.b),rep(0,missingSamples))
mean(neg.dat.b.2)
sd(neg.dat.b.2)
colSums(neg.dat)
## Per sample
missingSamples <- 320-length(colSums(neg.dat))
colSums(neg.dat)
neg.dat.2 <- c(neg.dat,rep(0,missingSamples) )
neg.dat.2 <- c(neg.dat,rep(0,missingSamples) )
mean(neg.dat.2)
neg.dat.2
neg.dat.2 <- c(colSums(neg.dat),rep(0,missingSamples) )
mean(neg.dat.2)
sort(neg.dat.2)
median(neg.dat.2)
IQR(neg.dat.2)
#ASVs
neg.dat.b <- make_binary(neg.dat,1)
length(colSums(neg.dat.b))
missingSamples <- 320-length(colSums(neg.dat.b))
neg.dat.b.2 <- c(colSums(neg.dat.b),rep(0,missingSamples))
mean(neg.dat.b.2)
sd(neg.dat.b.2)
median(neg.dat.b.2)
IQR(neg.dat.b.2)
mode(neg.dat.b.2)
mean(neg.dat.2)
sd(neg.dat.2)
median(neg.dat.2)
IQR(neg.dat.2)
sort(neg.dat.2)
rev(sort(neg.dat.2))
rev(sort(neg.dat.2))[-1:2]
rev(sort(neg.dat.2))[-c(1,2)]
mean(rev(sort(neg.dat.2))[-c(1,2)])
sd(rev(sort(neg.dat.2))[-c(1,2)])
median(neg.dat.2)
IQR(neg.dat.2)
#ASVs
neg.dat.b <- make_binary(neg.dat,1)
length(colSums(neg.dat.b))
missingSamples <- 320-length(colSums(neg.dat.b))
neg.dat.b.2 <- c(colSums(neg.dat.b),rep(0,missingSamples))
mean(neg.dat.b.2)
sd(neg.dat.b.2)
median(neg.dat.b.2)
IQR(neg.dat.b.2)
