annotation_north_arrow(location = "tr", which_north = "true", height = unit(0.9, "cm"), width = unit(0.9, "cm"))
dev.off()
pdf("Maps/OverviewV1.pdf",height = 6,width = 9)
basemap(limits = c(-25, -12, 63, 67), bathy.style = "rcb",rotate = TRUE)+
#basemap(limits = c(-25, -12, 63, 67),rotate = TRUE)+
ggspatial::geom_spatial_point(aes(x = Lon, y = Lat),data = metadata, color = "red",crs = 4326)+
#ggspatial::geom_spatial_text(aes(x = Lon, y = Lat+0.04,label=CoreID),data = metadata, color = "darkred",cex=2)+
xlab("Longitude")+
ylab("Latitude")+
annotation_scale(location = "bl")+
annotation_north_arrow(location = "tr", which_north = "true", height = unit(0.9, "cm"), width = unit(0.9, "cm"))
dev.off()
View(metadata)
library("seqinr")
metadata<-read.csv("AgeOut.csv")
metadata<-read.csv("metadata/AgeOut.csv")
metadata$rep <- gsub(".*-([0-9])$","\\1",metadata$SampleID)
metadata$SampleID
View(metadata)
ages<-read.csv("metadata/AgeOut.csv")
metadata.B05 <- read.csv("metadata/B05-2006.metadata.csv")
metadata.LN1 <- read.csv("metadata/LN1.metadata.csv")
# bring in metadata
ages<-read.csv("metadata/AgeOut.csv")
metadata.B05 <- read.csv("metadata/B05-2006.metadata.csv")
metadata.LN1 <- read.csv("metadata/LN1.metadata.csv")
metadata.LN2 <- read.csv("metadata/LN2.metadata.csv")
metadata$rep <- gsub(".*-([0-9])$","\\1",metadata$SampleID)
View(metadata.LN1)
EUK.data<- read.csv("rawData/EUK.B05-2006.raw.names.csv",row.names = 1)
EUK.tax <- read.csv("taxonomy/EUK.parsed.csv",row.names = 1)
EUK.data<- read.csv("rawData/EUK.B05-2006.raw.names.csv",row.names = 1)
EUK.tax <- read.csv("taxonomy/EUK.B05-2006.parsed.csv",row.names = 1)
EUK.asvs <- read.fasta("rawdata/ASVs/EUK.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
View(EUK.data)
B05.EUK.data<- read.csv("rawData/EUK.B05-2006.raw.names.csv",row.names = 1)
B05.EUK.tax <- read.csv("taxonomy/EUK.B05-2006.parsed.csv",row.names = 1)
B05.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
length(B05.EUK.asvs)
sapply(B05.EUK.asvs,FUN=length)
nchar(B05.EUK.asvs)
test <- cbind(B05.EUK.data,unlist(B05.EUK.asvs),B05.EUK.tax[match(rownames(B05.EUK.data),B05.EUK.tax$OTU),],nchar(B05.EUK.asvs))
View(test)
write.csv("B05.EUK.test.csv",cbind(B05.EUK.data,unlist(B05.EUK.asvs),B05.EUK.tax[match(rownames(B05.EUK.data),B05.EUK.tax$OTU),],nchar(B05.EUK.asvs)))
write.csv(file="B05.EUK.test.csv",cbind(B05.EUK.data,unlist(B05.EUK.asvs),B05.EUK.tax[match(rownames(B05.EUK.data),B05.EUK.tax$OTU),],nchar(B05.EUK.asvs)))
B05.RIZ.data<- read.csv("rawData/RIZ.B05-2006.raw.names.csv",row.names = 1)
B05.RIZ.tax <- read.csv("taxonomy/RIZ.B05-2006.parsed.csv",row.names = 1)
B05.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="B05.RIZ.test.csv",cbind(B05.RIZ.data,unlist(B05.RIZ.asvs),B05.RIZ.tax[match(rownames(B05.RIZ.data),B05.RIZ.tax$OTU),],nchar(B05.RIZ.asvs)))
B05.MAM.data<- read.csv("rawData/MAM.B05-2006.raw.names.csv",row.names = 1)
B05.MAM.tax <- read.csv("taxonomy/MAM.B05-2006.parsed.csv",row.names = 1)
B05.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="B05.MAM.test.csv",cbind(B05.MAM.data,unlist(B05.MAM.asvs),B05.MAM.tax[match(rownames(B05.MAM.data),B05.MAM.tax$OTU),],nchar(B05.MAM.asvs)))
#LN1
LN1.EUK.data<- read.csv("rawData/EUK.LN1-2006.raw.names.csv",row.names = 1)
#LN1
LN1.EUK.data<- read.csv("rawData/EUK.LN1.raw.names.csv",row.names = 1)
LN1.EUK.tax <- read.csv("taxonomy/EUK.LN1.parsed.csv",row.names = 1)
LN1.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.LN1.DADA2.ASVs.fasta",as.string = TRUE)
View(LN1.EUK.data)
colnames(LN1.EUK.data)
write.csv(file="LN1.EUK.test.csv",cbind(LN1.EUK.data,unlist(LN1.EUK.asvs),LN1.EUK.tax[match(rownames(LN1.EUK.data),LN1.EUK.tax$OTU),],nchar(LN1.EUK.asvs)))
LN1.RIZ.data<- read.csv("rawData/RIZ.LN1.raw.names.csv",row.names = 1)
LN1.RIZ.tax <- read.csv("taxonomy/RIZ.LN1.parsed.csv",row.names = 1)
LN1.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="LN1.RIZ.test.csv",cbind(LN1.RIZ.data,unlist(LN1.RIZ.asvs),LN1.RIZ.tax[match(rownames(LN1.RIZ.data),LN1.RIZ.tax$OTU),],nchar(LN1.RIZ.asvs)))
LN1.MAM.data<- read.csv("rawData/MAM.LN1.raw.names.csv",row.names = 1)
LN1.MAM.tax <- read.csv("taxonomy/MAM.LN1.parsed.csv",row.names = 1)
LN1.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="LN1.MAM.test.csv",cbind(LN1.MAM.data,unlist(LN1.MAM.asvs),LN1.MAM.tax[match(rownames(LN1.MAM.data),LN1.MAM.tax$OTU),],nchar(LN1.MAM.asvs)))
#LN2
LN2.EUK.data<- read.csv("rawData/EUK.LN2.raw.names.csv",row.names = 1)
LN2.EUK.tax <- read.csv("taxonomy/EUK.LN2.parsed.csv",row.names = 1)
LN2.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="LN2.EUK.test.csv",cbind(LN2.EUK.data,unlist(LN2.EUK.asvs),LN2.EUK.tax[match(rownames(LN2.EUK.data),LN2.EUK.tax$OTU),],nchar(LN2.EUK.asvs)))
LN2.RIZ.data<- read.csv("rawData/RIZ.LN2.raw.names.csv",row.names = 1)
LN2.RIZ.tax <- read.csv("taxonomy/RIZ.LN2.parsed.csv",row.names = 1)
LN2.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="LN2.RIZ.test.csv",cbind(LN2.RIZ.data,unlist(LN2.RIZ.asvs),LN2.RIZ.tax[match(rownames(LN2.RIZ.data),LN2.RIZ.tax$OTU),],nchar(LN2.RIZ.asvs)))
LN2.MAM.data<- read.csv("rawData/MAM.LN2.raw.names.csv",row.names = 1)
LN2.MAM.tax <- read.csv("taxonomy/MAM.LN2.parsed.csv",row.names = 1)
LN2.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="LN2.MAM.test.csv",cbind(LN2.MAM.data,unlist(LN2.MAM.asvs),LN2.MAM.tax[match(rownames(LN2.MAM.data),LN2.MAM.tax$OTU),],nchar(LN2.MAM.asvs)))
#B05
B05.EUK.data<- read.csv("rawData/EUK.B05-2006.raw.names.csv",row.names = 1)
B05.EUK.tax <- read.csv("taxonomy/EUK.B05-2006.parsed.csv",row.names = 1)
B05.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/B05.EUK.test.csv",t(cbind(B05.EUK.data,unlist(B05.EUK.asvs),B05.EUK.tax[match(rownames(B05.EUK.data),B05.EUK.tax$OTU),],nchar(B05.EUK.asvs))))
B05.RIZ.data<- read.csv("rawData/RIZ.B05-2006.raw.names.csv",row.names = 1)
B05.RIZ.tax <- read.csv("taxonomy/RIZ.B05-2006.parsed.csv",row.names = 1)
B05.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/B05.RIZ.test.csv",t(cbind(B05.RIZ.data,unlist(B05.RIZ.asvs),B05.RIZ.tax[match(rownames(B05.RIZ.data),B05.RIZ.tax$OTU),],nchar(B05.RIZ.asvs))))
B05.MAM.data<- read.csv("rawData/MAM.B05-2006.raw.names.csv",row.names = 1)
B05.MAM.tax <- read.csv("taxonomy/MAM.B05-2006.parsed.csv",row.names = 1)
B05.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/B05.MAM.test.csv",t(cbind(B05.MAM.data,unlist(B05.MAM.asvs),B05.MAM.tax[match(rownames(B05.MAM.data),B05.MAM.tax$OTU),],nchar(B05.MAM.asvs))))
#LN1
LN1.EUK.data<- read.csv("rawData/EUK.LN1.raw.names.csv",row.names = 1)
LN1.EUK.tax <- read.csv("taxonomy/EUK.LN1.parsed.csv",row.names = 1)
LN1.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN1.EUK.test.csv",t(cbind(LN1.EUK.data,unlist(LN1.EUK.asvs),LN1.EUK.tax[match(rownames(LN1.EUK.data),LN1.EUK.tax$OTU),],nchar(LN1.EUK.asvs))))
LN1.RIZ.data<- read.csv("rawData/RIZ.LN1.raw.names.csv",row.names = 1)
LN1.RIZ.tax <- read.csv("taxonomy/RIZ.LN1.parsed.csv",row.names = 1)
LN1.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN1.RIZ.test.csv",t(cbind(LN1.RIZ.data,unlist(LN1.RIZ.asvs),LN1.RIZ.tax[match(rownames(LN1.RIZ.data),LN1.RIZ.tax$OTU),],nchar(LN1.RIZ.asvs))))
LN1.MAM.data<- read.csv("rawData/MAM.LN1.raw.names.csv",row.names = 1)
LN1.MAM.tax <- read.csv("taxonomy/MAM.LN1.parsed.csv",row.names = 1)
LN1.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN1.MAM.test.csv",t(cbind(LN1.MAM.data,unlist(LN1.MAM.asvs),LN1.MAM.tax[match(rownames(LN1.MAM.data),LN1.MAM.tax$OTU),],nchar(LN1.MAM.asvs))))
#LN2
LN2.EUK.data<- read.csv("rawData/EUK.LN2.raw.names.csv",row.names = 1)
LN2.EUK.tax <- read.csv("taxonomy/EUK.LN2.parsed.csv",row.names = 1)
LN2.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN2.EUK.test.csv",t(cbind(LN2.EUK.data,unlist(LN2.EUK.asvs),LN2.EUK.tax[match(rownames(LN2.EUK.data),LN2.EUK.tax$OTU),],nchar(LN2.EUK.asvs))))
LN2.RIZ.data<- read.csv("rawData/RIZ.LN2.raw.names.csv",row.names = 1)
LN2.RIZ.tax <- read.csv("taxonomy/RIZ.LN2.parsed.csv",row.names = 1)
LN2.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN2.RIZ.test.csv",t(cbind(LN2.RIZ.data,unlist(LN2.RIZ.asvs),LN2.RIZ.tax[match(rownames(LN2.RIZ.data),LN2.RIZ.tax$OTU),],nchar(LN2.RIZ.asvs))))
LN2.MAM.data<- read.csv("rawData/MAM.LN2.raw.names.csv",row.names = 1)
LN2.MAM.tax <- read.csv("taxonomy/MAM.LN2.parsed.csv",row.names = 1)
LN2.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN2.MAM.test.csv",t(cbind(LN2.MAM.data,unlist(LN2.MAM.asvs),LN2.MAM.tax[match(rownames(LN2.MAM.data),LN2.MAM.tax$OTU),],nchar(LN2.MAM.asvs))))
#B05
B05.EUK.data<- read.csv("rawData/EUK.B05-2006.raw.names.csv",row.names = 1)
B05.EUK.tax <- read.csv("taxonomy/EUK.B05-2006.parsed.csv",row.names = 1)
B05.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/B05.EUK.test.csv",cbind(B05.EUK.data,unlist(B05.EUK.asvs),B05.EUK.tax[match(rownames(B05.EUK.data),B05.EUK.tax$OTU),],nchar(B05.EUK.asvs)))
B05.RIZ.data<- read.csv("rawData/RIZ.B05-2006.raw.names.csv",row.names = 1)
B05.RIZ.tax <- read.csv("taxonomy/RIZ.B05-2006.parsed.csv",row.names = 1)
B05.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/B05.RIZ.test.csv",cbind(B05.RIZ.data,unlist(B05.RIZ.asvs),B05.RIZ.tax[match(rownames(B05.RIZ.data),B05.RIZ.tax$OTU),],nchar(B05.RIZ.asvs)))
B05.MAM.data<- read.csv("rawData/MAM.B05-2006.raw.names.csv",row.names = 1)
B05.MAM.tax <- read.csv("taxonomy/MAM.B05-2006.parsed.csv",row.names = 1)
B05.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.B05-2006.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/B05.MAM.test.csv",cbind(B05.MAM.data,unlist(B05.MAM.asvs),B05.MAM.tax[match(rownames(B05.MAM.data),B05.MAM.tax$OTU),],nchar(B05.MAM.asvs)))
#LN1
LN1.EUK.data<- read.csv("rawData/EUK.LN1.raw.names.csv",row.names = 1)
LN1.EUK.tax <- read.csv("taxonomy/EUK.LN1.parsed.csv",row.names = 1)
LN1.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN1.EUK.test.csv",cbind(LN1.EUK.data,unlist(LN1.EUK.asvs),LN1.EUK.tax[match(rownames(LN1.EUK.data),LN1.EUK.tax$OTU),],nchar(LN1.EUK.asvs)))
LN1.RIZ.data<- read.csv("rawData/RIZ.LN1.raw.names.csv",row.names = 1)
LN1.RIZ.tax <- read.csv("taxonomy/RIZ.LN1.parsed.csv",row.names = 1)
LN1.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN1.RIZ.test.csv",cbind(LN1.RIZ.data,unlist(LN1.RIZ.asvs),LN1.RIZ.tax[match(rownames(LN1.RIZ.data),LN1.RIZ.tax$OTU),],nchar(LN1.RIZ.asvs)))
LN1.MAM.data<- read.csv("rawData/MAM.LN1.raw.names.csv",row.names = 1)
LN1.MAM.tax <- read.csv("taxonomy/MAM.LN1.parsed.csv",row.names = 1)
LN1.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN1.MAM.test.csv",cbind(LN1.MAM.data,unlist(LN1.MAM.asvs),LN1.MAM.tax[match(rownames(LN1.MAM.data),LN1.MAM.tax$OTU),],nchar(LN1.MAM.asvs)))
#LN2
LN2.EUK.data<- read.csv("rawData/EUK.LN2.raw.names.csv",row.names = 1)
LN2.EUK.tax <- read.csv("taxonomy/EUK.LN2.parsed.csv",row.names = 1)
LN2.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN2.EUK.test.csv",cbind(LN2.EUK.data,unlist(LN2.EUK.asvs),LN2.EUK.tax[match(rownames(LN2.EUK.data),LN2.EUK.tax$OTU),],nchar(LN2.EUK.asvs)))
LN2.RIZ.data<- read.csv("rawData/RIZ.LN2.raw.names.csv",row.names = 1)
LN2.RIZ.tax <- read.csv("taxonomy/RIZ.LN2.parsed.csv",row.names = 1)
LN2.RIZ.asvs <- read.fasta("rawdata/ASVs/RIZ.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN2.RIZ.test.csv",cbind(LN2.RIZ.data,unlist(LN2.RIZ.asvs),LN2.RIZ.tax[match(rownames(LN2.RIZ.data),LN2.RIZ.tax$OTU),],nchar(LN2.RIZ.asvs)))
LN2.MAM.data<- read.csv("rawData/MAM.LN2.raw.names.csv",row.names = 1)
LN2.MAM.tax <- read.csv("taxonomy/MAM.LN2.parsed.csv",row.names = 1)
LN2.MAM.asvs <- read.fasta("rawdata/ASVs/MAM.LN2.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN2.MAM.test.csv",cbind(LN2.MAM.data,unlist(LN2.MAM.asvs),LN2.MAM.tax[match(rownames(LN2.MAM.data),LN2.MAM.tax$OTU),],nchar(LN2.MAM.asvs)))
library(dada2)
test <- collapseNoMismatch(read.csv("~/Desktop/WP4.LN2/6.mappings/OTUtabs/EUK.LN2.raw.csv",row.names = 1))
test <- collapseNoMismatch(t(read.csv("~/Desktop/WP4.LN2/6.mappings/OTUtabs/EUK.LN2.raw.csv",row.names = 1)))
View(LN2.MAM.data)
test2 <- t(read.csv("~/Desktop/WP4.LN2/6.mappings/OTUtabs/EUK.LN2.raw.csv",row.names = 1))
test2 <- as.data.frame(t(read.csv("~/Desktop/WP4.LN2/6.mappings/OTUtabs/EUK.LN2.raw.csv",row.names = 1)))
test2 <- collapseNoMismatch(t(read.csv("~/Desktop/WP4.LN2/6.mappings/OTUtabs/EUK.LN2.raw.csv",row.names = 1)))
LN1.EUK.lulu.data<- read.csv("rawData/EUK.LN1.lulu.csv",row.names = 1)
write.csv(file="cleaneddata/testdata/LN1.EUK.test.csv",cbind(LN1.EUK.lulu.data,
unlist(LN1.EUK.asvs)[match(rownames(LN1.EUK.lulu.data),names(LN1.EUK.asvs)),],
LN1.EUK.tax[match(rownames(LN1.EUK.lulu.data),LN1.EUK.tax$OTU),],
nchar(LN1.EUK.asvs)[match(rownames(LN1.EUK.lulu.data),names(LN1.EUK.asvs)),]))
match(rownames(LN1.EUK.lulu.data),names(LN1.EUK.asvs))
write.csv(file="cleaneddata/testdata/LN1.EUK.test.csv",cbind(LN1.EUK.lulu.data,
unlist(LN1.EUK.asvs)[match(rownames(LN1.EUK.lulu.data),names(LN1.EUK.asvs))],
LN1.EUK.tax[match(rownames(LN1.EUK.lulu.data),LN1.EUK.tax$OTU),],
nchar(LN1.EUK.asvs)[match(rownames(LN1.EUK.lulu.data),names(LN1.EUK.asvs))]))
LN1.EUK.data<- read.csv("rawData/EUK.LN1.raw.names.csv",row.names = 1)
LN1.EUK.tax <- read.csv("taxonomy/EUK.LN1.parsed.csv",row.names = 1)
LN1.EUK.asvs <- read.fasta("rawdata/ASVs/EUK.LN1.DADA2.ASVs.fasta",as.string = TRUE)
write.csv(file="cleaneddata/testdata/LN1.EUK.test.csv",cbind(LN1.EUK.data,unlist(LN1.EUK.asvs),LN1.EUK.tax[match(rownames(LN1.EUK.data),LN1.EUK.tax$OTU),],nchar(LN1.EUK.asvs)))
LN1.EUK.lulu.data<- read.csv("rawData/EUK.LN1.lulu.csv",row.names = 1)
write.csv(file="cleaneddata/testdata/LN1.EUK.lulu.test.csv",cbind(LN1.EUK.lulu.data,
unlist(LN1.EUK.asvs)[match(rownames(LN1.EUK.lulu.data),names(LN1.EUK.asvs))],
LN1.EUK.tax[match(rownames(LN1.EUK.lulu.data),LN1.EUK.tax$OTU),],
nchar(LN1.EUK.asvs)[match(rownames(LN1.EUK.lulu.data),names(LN1.EUK.asvs))]))
list.files("rawdata",pattern="....raw.csv")
getwd()
list.files("rawdata",pattern="....raw.csv")
list.files("rawdata",pattern="*.csv")
test_data <- data.frame(
a = c(1, 2, 3.5), # Contains a decimal
b = c(4, 5, 6),   # Only integers
c = c("7", "8", "9") # These are character strings and should cause an error
)
View(test_data)
str(test_data)
minimumReads <- function(data,minreads) {
# Ensure the input is either a dataframe or matrix
if (!is.data.frame(data) && !is.matrix(data)) {
stop("Input must be a dataframe or matrix")
}
# Flatten the data to make it easier to work with
flat_data <- as.vector(as.matrix(data))
# Check for non-numeric values
if (any(!is.na(suppressWarnings(as.numeric(flat_data))) == FALSE)) {
stop("Error: All values must be numeric or integer.")
}
# Check for numeric values that are not integers
has_decimals <- any(flat_data != floor(flat_data))
if (has_decimals) {
warning("Warning: Some values are numeric with decimals, can you have a decimal read?")
}
data <- apply(data, c(1,2), function(x) {
if (!is.na(as.numeric(x)) && as.numeric(x) <= minreads) {
return(0)
} else {
return(x)
}
})
return(data)
}
minimumReads(test_data,3)
minimumReads <- function(data,minreads) {
# Ensure the input is either a dataframe or matrix
if (!is.data.frame(data) && !is.matrix(data)) {
stop("Input must be a dataframe or matrix")
}
# Flatten the data to make it easier to work with
flat_data <- as.vector(as.matrix(data))
# Check for non-numeric values
if (any(suppressWarnings(is.numeric(flat_data))) == FALSE) {
stop("Error: All values must be numeric or integer.")
}
# Check for numeric values that are not integers
has_decimals <- any(flat_data != floor(flat_data))
if (has_decimals) {
warning("Warning: Some values are numeric with decimals, can you have a decimal read?")
}
data <- apply(data, c(1,2), function(x) {
if (!is.na(as.numeric(x)) && as.numeric(x) <= minreads) {
return(0)
} else {
return(x)
}
})
return(data)
}
minimumReads(test_data,3)
test_data2 <- data.frame(
a = c(1, 2, 3.5), # Contains a decimal
b = c(4, 5, 6),   # Only integers
c = c(7,8, 9) # These are character strings and should cause an error
)
minimumReads(test_data2,3)
test2 <- minimumReads(test_data2,3)
View(test2)
minimumReads <- function(data,minreads) {
# Ensure the input is either a dataframe or matrix
if (!is.data.frame(data) && !is.matrix(data)) {
stop("Input must be a dataframe or matrix")
}
# Flatten the data to make it easier to work with
flat_data <- as.vector(as.matrix(data))
# Check for non-numeric values
if (any(suppressWarnings(is.numeric(flat_data))) == FALSE) {
stop("Error: All values must be numeric or integer.")
}
# Check for numeric values that are not integers
has_decimals <- any(flat_data != floor(flat_data))
if (has_decimals) {
warning("Warning: Some values are numeric with decimals, can you have a decimal read?")
}
data <- apply(data, c(1,2), function(x) {
if (!is.na(as.numeric(x)) && as.numeric(x) <= minreads) {
return(0)
} else {
return(x)
}
})
return(as.data.frame(data))
}
test_data <- data.frame(
a = c(1, 2, 3.5), # Contains a decimal
b = c(4, 5, 6),   # Only integers
c = c("7", "8", "9") # These are character strings and should cause an error
)
test_data2 <- data.frame(
a = c(1, 2, 3.5), # Contains a decimal
b = c(4, 5, 6),   # Only integers
c = c(7,8, 9) # These are character strings and should cause an error
)
minimumReads(test_data,3)
minimumReads(test_data2,3)
test2 <- minimumReads(test_data2,3)
View(test2)
minimumReps <- function(data,min_obs) {
# Check if data is a dataframe or matrix
if (!is.data.frame(data) && !is.matrix(data)) {
stop("Input must be a dataframe or matrix.")
}
# Determine the input type to return the same type
input_type <- if (is.data.frame(data)) "data.frame" else "matrix"
# Function to count NA values in a row
na_count <- function(row) {
sum(is.na(row))
}
# Calculate the total number of observations (non-NA) for each row
total_obs <- apply(data, 1, function(row) length(row) - na_count(row))
# Filter rows based on the user-specified minimum number of observations
filtered_data <- data[total_obs >= min_obs, ]
# Ensure the output is of the same type as the input
if (input_type == "matrix") {
return(as.matrix(filtered_data))
} else {
return(as.data.frame(filtered_data))
}
}
set.seed(123) # Ensure reproducibility
# Generate a dataframe
test_df <- data.frame(
numbers = sample(c(1:100, rep(NA, 10)), 100, replace = TRUE),
letters = sample(c(LETTERS, rep(NA, 10)), 100, replace = TRUE),
booleans = sample(c(TRUE, FALSE, NA), 100, replace = TRUE)
)
# Add some rows with fewer non-NA values
test_df <- rbind(test_df, data.frame(numbers = c(NA, NA, 5), letters = c(NA, "A", NA), booleans = c(TRUE, NA, NA)))
View(test_df)
minimumReps(test_df)
minimumReps(test_df,2)
set.seed(456) # Ensure reproducibility
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(1:100, rep(NA, 20)), 200, replace = TRUE), nrow = 40, ncol = 5)
View(test_matrix_numeric)
minimumReps(test_df,56)
minimumReps(test_matrix_numeric,56)
View(test_matrix_numeric)
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(0:100, rep(NA, 20)), 200, replace = TRUE), nrow = 40, ncol = 5)
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(0:10, rep(NA, 20)), 200, replace = TRUE), nrow = 40, ncol = 5)
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(0:10, rep(NA, 2)), 200, replace = TRUE), nrow = 40, ncol = 5)
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(0:10, rep(NA, 1)), 200, replace = TRUE), nrow = 40, ncol = 10)
minimumReps(test_matrix_numeric,6)
minimumReps(test_matrix_numeric,9)
minimumReps <- function(data,min_obs) {
# Check if data is a dataframe or matrix
if (!is.data.frame(data) && !is.matrix(data)) {
stop("Input must be a dataframe or matrix.")
}
# Determine the input type to return the same type
input_type <- if (is.data.frame(data)) "data.frame" else "matrix"
# Calculate the number of non-zero observations per row
total_obs <- apply(data, 1, function(row) sum(row > 0, na.rm = TRUE))
# Filter rows based on the user-specified minimum number of non-zero observations
filtered_data <- data[total_obs >= min_obs, ]
# Ensure the output is of the same type as the input
if (input_type == "matrix") {
return(as.matrix(filtered_data))
} else {
return(as.data.frame(filtered_data))
}
}
set.seed(123) # Ensure reproducibility
# Generate a dataframe
test_df <- data.frame(
numbers = sample(c(1:100, rep(NA, 10)), 100, replace = TRUE),
letters = sample(c(LETTERS, rep(NA, 10)), 100, replace = TRUE),
booleans = sample(c(TRUE, FALSE, NA), 100, replace = TRUE)
)
# Add some rows with fewer non-NA values
test_df <- rbind(test_df, data.frame(numbers = c(NA, NA, 5), letters = c(NA, "A", NA), booleans = c(TRUE, NA, NA)))
set.seed(456) # Ensure reproducibility
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(0:10, rep(NA, 1)), 200, replace = TRUE), nrow = 40, ncol = 10)
minimumReps(test_matrix_numeric,9)
minimumReps(test_matrix_numeric,1)
minimumReps <- function(data,min_obs) {
# Check if data is a dataframe or matrix
if (!is.data.frame(data) && !is.matrix(data)) {
stop("Input must be a dataframe or matrix.")
}
# Determine the input type to return the same type
input_type <- if (is.data.frame(data)) "data.frame" else "matrix"
# Calculate the number of non-zero observations per row
total_obs <- apply(data, 1, function(row) sum(row > 0, na.rm = TRUE))
# Filter rows based on the user-specified minimum number of non-zero observations
filtered_data <- data[total_obs >= min_obs, ]
# Ensure the output is of the same type as the input
if (input_type == "matrix") {
return(as.matrix(filtered_data))
} else {
return(as.data.frame(filtered_data))
}
}
minimumReps <- function(data,min_obs) {
# Check if data is a dataframe or matrix
if (!is.data.frame(data) && !is.matrix(data)) {
stop("Input must be a dataframe or matrix.")
}
# Check for NA values
if (any(is.na(data))) {
stop("Data contains NA values, which are not allowed.")
}
# Determine the input type to return the same type
input_type <- if (is.data.frame(data)) "data.frame" else "matrix"
# Calculate the number of non-zero observations per row
total_obs <- apply(data, 1, function(row) sum(row > 0, na.rm = TRUE))
# Filter rows based on the user-specified minimum number of non-zero observations
filtered_data <- data[total_obs >= min_obs, ]
# Ensure the output is of the same type as the input
if (input_type == "matrix") {
return(as.matrix(filtered_data))
} else {
return(as.data.frame(filtered_data))
}
}
minimumReps(test_matrix_numeric,1)
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(0:10), 200, replace = TRUE), nrow = 40, ncol = 10)
minimumReps(test_matrix_numeric,1)
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(rep(0,10),0:10), 200, replace = TRUE), nrow = 40, ncol = 10)
minimumReps(test_matrix_numeric,2)
View(test_matrix_numeric)
minimumReps(test_matrix_numeric,6)
# Generate a numeric matrix
test_matrix_numeric <- matrix(sample(c(rep(0,100),0:10), 200, replace = TRUE), nrow = 40, ncol = 10)
minimumReps(test_matrix_numeric,1)
# Generate matrix1 with random numbers
matrix1 <- matrix(runif(30, 1, 10), nrow = 6, ncol = 5)
# Generate matrix2 with a structured approach to test various conditions
matrix2 <- matrix(c(seq(1, 10, length.out = 15),
seq(5, 15, length.out = 15)), nrow = 6, ncol = 5)
View(matrix1)
View(matrix2)
process_datasets(matrix1, matrix2, "max")
dataCleanBy(matrix1, matrix2, "max")
dataCleanBy <- function(inputdata,cleaningdata,method){
# Check if inputs are matrices or dataframes and convert dataframes to matrices
if (is.data.frame(data1)) data1 <- as.matrix(data1)
if (is.data.frame(data2)) data2 <- as.matrix(data2)
# Check both contain only numeric values
if (!all(sapply(data1, is.numeric)) || !all(sapply(data2, is.numeric))) {
stop("Both inputs must contain only numeric values.")
}
# Check they have the same number of rows
if (nrow(data1) != nrow(data2)) {
stop("Both inputs must have the same number of rows.")
}
# Calculate metric for each row in the second matrix/dataframe
metric_values <- apply(data2, 1, function(row) {
if (metric == "max") {
return(max(row))
} else if (metric == "min") {
return(min(row))
} else if (metric == "avr") {
return(mean(row))
} else {
stop("Metric must be 'max', 'min', or 'avr'.")
}
})
# Update the first dataset based on the metric
for (i in 1:nrow(data1)) {
data1[i, data1[i, ] >= metric_values[i]] <- 0
}
# Remove rows with only zero values
data1 <- data1[rowSums(data1 != 0) > 0, ]
return(data1)
}
dataCleanBy(matrix1, matrix2, "max")
dataCleanBy <- function(inputdata, cleaningdata, method) {
# Check if inputs are matrices or dataframes and convert dataframes to matrices
if (is.data.frame(inputdata)) inputdata <- as.matrix(inputdata)
if (is.data.frame(cleaningdata)) cleaningdata <- as.matrix(cleaningdata)
# Check both contain only numeric values
if (!all(sapply(inputdata, is.numeric)) || !all(sapply(cleaningdata, is.numeric))) {
stop("Both inputs must contain only numeric values.")
}
# Check they have the same number of rows
if (nrow(inputdata) != nrow(cleaningdata)) {
stop("Both inputs must have the same number of rows.")
}
# Calculate metric for each row in the second matrix/dataframe
metric_values <- apply(cleaningdata, 1, function(row) {
if (method == "max") {
return(max(row))
} else if (method == "min") {
return(min(row))
} else if (method == "avr") {
return(mean(row))
} else {
stop("Method must be 'max', 'min', or 'avr'.")
}
})
# Update the first dataset based on the metric
for (i in 1:nrow(inputdata)) {
inputdata[i, inputdata[i, ] >= metric_values[i]] <- 0
}
# Remove rows with only zero values
inputdata <- inputdata[rowSums(inputdata != 0) > 0, ]
return(inputdata)
}
# Generate matrix1 with random numbers
matrix1 <- matrix(runif(30, 1, 10), nrow = 6, ncol = 5)
dataCleanBy(matrix1, matrix2, "max")
View(matrix1)
View(matrix2)
dataCleanBy(matrix1, matrix2, "min")
