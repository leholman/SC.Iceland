install.packages("devtools")
library("devtools")
install_github("leholman/metabarTOAD")
tax <- ParseTaxonomy(pctThreshold = 99,
covpct = 95,
blastoutput = "rawresults.18S.txt",
lineages = "ncbi_lineages_2023-04-27.csv.gz")
library("metabarTOAD")
tax <- ParseTaxonomy(pctThreshold = 99,
covpct = 95,
blastoutput = "rawresults.18S.txt",
lineages = "ncbi_lineages_2023-04-27.csv.gz")
View(tax)
tax <- ParseTaxonomy(pctThreshold = 98,
covpct = 95,
blastoutput = "rawresults.18S.txt",
lineages = "ncbi_lineages_2023-04-27.csv.gz")
View(tax)
cores <- read.csv("Desktop/Cores.csv")
View(cores)
as.factor(cores$CoreID)
plot(as.factor(cores$CoreID),cores$Length)
plot(as.numeric(as.factor(cores$CoreID)),cores$Length,pch=16)
plot(as.numeric(as.factor(cores$CoreID)),cores$Length,pch=16,col="orange")
library(rbacon)
library(rbacon)
env()
Version()
version()
packageVersion("rbacon")
entrez_db_searchable("sra")
library("rentrez")
install.packages("rentrez")
library("rentrez")
entrez_db_searchable("sra")
entrez_search(db="sra", STRA="Amplicon")
entrez_search(db="sra", term="Amplicon[STRA]")
?entrez_search
test <- entrez_search(db="sra", term="Amplicon[STRA]")
test <- entrez_search(db="sra", term="Amplicon[STRA]",retmax=0)
test <- entrez_search(db="sra", term="Amplicon[STRA]",retmax=1^22)
test <- entrez_search(db="sra", term="Amplicon[STRA]",retmax=99999999999999999)
plot(1:10,1:10)
text(4,4,label="test")
text(5,4,label="test")
text(5,4,label=expression(paste0("test R",^2))
text(5,4,label=expression(paste0("test R",^2)))
plot(1:10, main=expression(paste("Plot with Superscript ", x^2, " and ", y^3)))
text(5,4,label=expression(paste0("test R",R^2)))
setwd("~/GitHubRepos/SC.Iceland/taxonomy/functionalAnno")
df <- read.table("alnout.txt")
df <- readLines("alnout.txt")
data <- readLines("alnout.txt")
df <- data.frame(data, stringsAsFactors = FALSE)
View(df)
# Extract ASV and category
df$ASV <- sub(" .*", "", df$data)
df$Category <- sub("^[^ ]+ ([^;]+);.*", "\\1", df$data)
View(df)
View(df)
df$ASV <- regmatches(df$data, regexpr("ASV_\\d+", df$data))
View(df)
df$Category <- sub("^[^ ]+ ([^;]+);.*", "\\1", df$data)
View(df)
df$Category <- sub("^ASV_\\d+\\s+([^;]+);.*", "\\1", df$data)
View(df)
# Resolve conflicts
resolved <- aggregate(Category ~ ASV, df, function(x) if(length(unique(x)) > 1) "Unknown" else unique(x))
View(resolved)
PR2assignments <- read.csv("EUK.cleaned.PR2.csv")
match(resolved$ASV,PR2assignments$X)
View(PR2assignments)
match(resolved$ASV,PR2assignments$X.1)
PR2assignments$cat <- resolved$ASV[match(resolved$ASV,PR2assignments$X.1)]
PR2assignments$cat <- resolved$ASV[match(PR2assignments$X.1,resolved$ASV)]
View(PR2assignments)
PR2assignments$cat <- resolved$Category[match(PR2assignments$X.1,resolved$ASV)]
View(PR2assignments)
is.na(PR2assignments$cat) <- "Unknown"
is.na(PR2assignments$cat)
# Resolve conflicts
resolved <- aggregate(Category ~ ASV, df, function(x) if(length(unique(x)) > 1) "Unknown" else unique(x))
PR2assignments <- read.csv("EUK.cleaned.PR2.csv")
PR2assignments$cat <- resolved$Category[match(PR2assignments$X.1,resolved$ASV)]
is.na(PR2assignments$cat) <- "Unknown"
is.na(PR2assignments$cat)
PR2assignments$cat[is.na(PR2assignments$cat)] <- "Unknown"
View(PR2assignments)
write.csv(PR2assignments,"EUK.cleaned.PR2.cat.csv")
